/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-06-13 06:28:28.435087
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
// #define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
// IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan std::isnan
#endif
#ifndef isinf
#define isinf std::isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKcos(j[3]);
x5=IKcos(j[5]);
x6=IKcos(j[4]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKsin(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[0]);
x12=IKcos(j[6]);
x13=IKsin(j[6]);
x14=((0.3125)*x0);
x15=((1.0)*x5);
x16=((1.0)*x12);
x17=((1.0)*x13);
x18=((1.0)*x8);
x19=((1.0)*x6);
x20=(x4*x6);
x21=(x7*x8);
x22=(x4*x8);
x23=(x1*x3);
x24=(x10*x4);
x25=(x0*x2);
x26=(x0*x1);
x27=(x10*x7);
x28=(x2*x3);
x29=(x5*x7);
x30=((1.0)*x28);
x31=((0.38609)*x25);
x32=((0.38609)*x23);
x33=((0.0675)*x26);
x34=((0.0675)*x28);
x35=((0.124915)*x26);
x36=((0.124915)*x28);
x37=((0.029)*x20);
x38=((((-1.0)*x30))+x26);
x39=(x25+x23);
x40=((((-1.0)*x26))+x30);
x41=((((-1.0)*x35))+x36);
x42=((((-0.0075)*x26))+(((0.0075)*x28)));
x43=((((-0.029)*x26))+(((0.029)*x28)));
x44=((((0.86859)*x28))+(((-0.86859)*x26)));
x45=((((0.124915)*x25))+(((0.124915)*x23)));
x46=((((-1.0)*x23))+(((-1.0)*x25)));
x47=((((1.0)*x25))+(((1.0)*x23)));
x48=(x38*x7);
x49=(x10*x38);
x50=(x10*x39);
x51=(x39*x6);
x52=(x38*x6);
x53=((((-1.0)*x18*x6*x7))+((x15*x4)));
x54=(x44*x7);
x55=(x42*x7);
x56=((((-1.0)*x15*x6*x7))+(((-1.0)*x18*x4)));
x57=(x45*x6);
x58=(x24*x40);
x59=(x33+x32+x31+x14);
x60=(((x16*x27))+(((-1.0)*x17*x56)));
x61=(((x20*x38))+x50);
x62=((((-1.0)*x17*x27))+(((-1.0)*x16*x56)));
x63=(x58+x51);
x64=(((x37*x38))+(((0.029)*x50)));
x65=(((x20*x46))+x49);
x66=(x61*x8);
x67=((((-0.86859)*x20*x38))+(((-0.86859)*x50)));
x68=((((-1.0)*x51))+(((-1.0)*x58)));
x69=(x67*x8);
x70=((-0.016)+(((-0.029)*x22))+(((0.124915)*x27))+((x6*(((((-0.029)*x29))+(((0.86859)*x21))))))+((x4*(((-0.0075)+(((-0.86859)*x5)))))));
x71=((((-1.0)*x18*x40*x7))+(((-1.0)*x15*x61)));
x72=(x13*x71);
x73=((((-1.0)*x5*x65))+(((-1.0)*x21*x47)));
eerot[0]=(((x11*x53))+((x9*(((((-1.0)*x15*x48))+(((-1.0)*x18*x61)))))));
eerot[1]=(((x11*x60))+((x9*(((((-1.0)*x16*x63))+(((-1.0)*x17*x71)))))));
eerot[2]=(((x11*x62))+((x9*(((((-1.0)*x17*x68))+(((-1.0)*x16*x71)))))));
IkReal x74=((1.0)*x15);
IkReal x75=((1.0)*x18);
eetrans[0]=((((0.015)*x11))+((x11*x70))+((x9*(((((-1.0)*x54*x74))+(((-1.0)*x19*x45))+(((-1.0)*x24*x41))+(((-1.0)*x43*x7*x75))+x34+(((-1.0)*x67*x75))+(((-1.0)*x64*x74))+(((-1.0)*x55))+(((-1.0)*x59)))))));
eerot[3]=(((x53*x9))+((x11*((((x29*x38))+x66)))));
eerot[4]=(((x60*x9))+((x11*((((x12*x63))+x72)))));
eerot[5]=(((x11*((((x13*x68))+((x12*x71))))))+((x62*x9)));
eetrans[1]=(((x70*x9))+(((0.015)*x9))+((x11*(((((-1.0)*x34))+((x29*x44))+((x21*x43))+((x5*x64))+x59+x55+x57+x69+((x24*x41)))))));
eerot[6]=(((x29*x46))+((x65*x8)));
eerot[7]=(((x12*((x52+((x24*x47))))))+((x13*x73)));
eerot[8]=(((x13*(((((-1.0)*x24*x47))+(((-1.0)*x19*x38))))))+((x12*x73)));
eetrans[2]=((0.115)+((x8*(((((-0.86859)*x20*x46))+(((-0.86859)*x49))))))+((x7*(((((0.0075)*x23))+(((0.0075)*x25))))))+((x21*(((((0.029)*x23))+(((0.029)*x25))))))+((x29*(((((0.86859)*x23))+(((0.86859)*x25))))))+(((-0.3125)*x3))+(((0.38609)*x26))+(((-0.38609)*x28))+((x6*(((((-1.0)*x36))+x35))))+((x5*((((x37*x46))+(((0.029)*x49))))))+((x24*x45))+(((-0.0675)*x23))+(((-0.0675)*x25)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r22);
new_r01=r21;
new_r02=r20;
new_px=((-0.115)+pz+(((0.86859)*r20)));
new_r10=((((-1.0)*r12*(IKcos(j0))))+((r02*(IKsin(j0)))));
new_r11=((((-1.0)*r01*(IKsin(j0))))+((r11*(IKcos(j0)))));
new_r12=((((-1.0)*r00*(IKsin(j0))))+((r10*(IKcos(j0)))));
IkReal x76=IKcos(j0);
IkReal x77=IKsin(j0);
new_py=(((py*x76))+(((-1.0)*px*x77))+(((0.86859)*r10*x76))+(((-0.86859)*r00*x77)));
new_r20=(((r12*(IKsin(j0))))+((r02*(IKcos(j0)))));
new_r21=((((-1.0)*r01*(IKcos(j0))))+(((-1.0)*r11*(IKsin(j0)))));
new_r22=((((-1.0)*r10*(IKsin(j0))))+(((-1.0)*r00*(IKcos(j0)))));
IkReal x78=IKcos(j0);
IkReal x79=IKsin(j0);
new_pz=((0.015)+(((-0.86859)*r10*x79))+(((-1.0)*px*x78))+(((-0.86859)*r00*x78))+(((-1.0)*py*x79)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x80=((1.0)*px);
IkReal x81=((1.0)*pz);
IkReal x82=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x82))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x81)));
rxp0_2=((((-1.0)*r10*x80))+((py*r00)));
rxp1_0=((((-1.0)*r21*x82))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x81)));
rxp1_2=((((-1.0)*r11*x80))+((py*r01)));
rxp2_0=((((-1.0)*r22*x82))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x81))+((px*r22)));
rxp2_2=((((-1.0)*r12*x80))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x83=((0.0075)*r22);
IkReal x84=((1.0)*pz);
IkReal x85=((0.029)*r20);
IkReal x86=((0.124915)*r21);
IkReal x87=((5.8)*rxp1_0);
IkReal x88=((0.0435)*r00);
IkReal x89=((0.1873725)*r01);
IkReal x90=((1.75874326461126)*r21);
IkReal x91=((0.399728)*r10);
IkReal x92=((3.60012325332694)*r02);
IkReal x93=((0.169644448255335)*r22);
IkReal x94=((60.6463194693538)*rxp2_2);
IkReal x95=((1.5)*px);
IkReal x96=((7.57563499651433)*r20);
IkReal x97=((10.6027780159584)*npz);
IkReal x98=((3.2)*rxp2_1);
IkReal x99=((1.898846870013)*r12);
IkReal x100=((0.0928)*r11);
IkReal x101=((24.983)*rxp0_0);
IkReal x102=((1.32444601586344)*r20);
IkReal x103=((5.8)*rxp1_1);
IkReal x104=((3.2)*rxp2_0);
IkReal x105=((0.0435)*r10);
IkReal x106=((0.1873725)*r11);
IkReal x107=((1.898846870013)*r02);
IkReal x108=((1.8536805306462)*npz);
IkReal x109=((0.0928)*r01);
IkReal x110=((3.60012325332694)*r12);
IkReal x111=((1.5)*py);
IkReal x112=((0.0296588884903392)*r22);
IkReal x113=((0.307480562462794)*r21);
IkReal x114=((0.399728)*r00);
IkReal x115=((10.6027780159584)*rxp2_2);
IkReal x116=((24.983)*rxp0_1);
IkReal x117=((0.087)*r11);
IkReal x118=((0.614961124925588)*r20);
IkReal x119=((49.966)*rxp1_1);
IkReal x120=((0.374745)*r10);
IkReal x121=((0.1856)*r00);
IkReal x122=((2.64889203172689)*r21);
IkReal x123=((0.799456)*r01);
IkReal x124=((11.6)*rxp0_1);
IkReal x125=((49.966)*rxp1_0);
IkReal x126=((0.374745)*r00);
IkReal x127=((11.6)*rxp0_0);
IkReal x128=((0.087)*r01);
IkReal x129=((0.1856)*r10);
IkReal x130=((3.51748652922252)*r20);
IkReal x131=((15.1512699930287)*r21);
IkReal x132=((0.799456)*r11);
IkReal x133=((0.015)*r20);
IkReal x134=((7.53664650665388)*r00);
IkReal x135=((121.292638938708)*rxp0_2);
IkReal x136=((49.966)*rxp2_0);
IkReal x137=((11.6)*px);
IkReal x138=((1.449014)*r01);
IkReal x139=((0.339288896510669)*r20);
IkReal x140=((15.1512699930287)*r22);
IkReal x141=((6.4)*rxp0_1);
IkReal x142=((21.2055560319168)*npx);
IkReal x143=((3.797693740026)*r10);
IkReal x144=((0.799456)*r12);
IkReal x145=((6.4)*rxp0_0);
IkReal x146=((7.53664650665388)*r10);
IkReal x147=((3.70736106129241)*npx);
IkReal x148=((3.797693740026)*r00);
IkReal x149=((49.966)*rxp2_1);
IkReal x150=((11.6)*py);
IkReal x151=((0.799456)*r02);
IkReal x152=((1.449014)*r11);
IkReal x153=((21.2055560319168)*rxp0_2);
IkReal x154=((2.64889203172689)*r22);
IkReal x155=((0.0593177769806785)*r20);
IkReal x156=((12.8)*rxp1_0);
IkReal x157=((42.4111120638336)*rxp1_2);
IkReal x158=((15.0732930133078)*r11);
IkReal x159=((0.118635553961357)*r21);
IkReal x160=((7.59538748005199)*r01);
IkReal x161=((7.41472212258481)*npy);
IkReal x162=((2.898028)*r10);
IkReal x163=((12.8)*rxp1_1);
IkReal x164=((242.585277877415)*rxp1_2);
IkReal x165=((0.678577793021338)*r21);
IkReal x166=((7.59538748005199)*r11);
IkReal x167=((2.898028)*r00);
IkReal x168=((42.4111120638336)*npy);
IkReal x169=((15.0732930133078)*r01);
IkReal x170=((400.0)*npx);
IkReal x171=((100.0)*pp);
IkReal x172=((800.0)*npy);
IkReal x173=((200.0)*pp);
IkReal x174=((200.0)*npz);
IkReal x175=((400.0)*pp);
IkReal x176=((((0.24983)*r20))+(((-0.058)*r21)));
IkReal x177=(px*x174);
IkReal x178=(r02*x171);
IkReal x179=(py*x174);
IkReal x180=(r12*x171);
IkReal x181=((-0.03)*r21);
IkReal x182=((-0.015)*r20);
IkReal x183=(px*x170);
IkReal x184=(r00*x173);
IkReal x185=(py*x170);
IkReal x186=(r10*x173);
IkReal x187=(py*x172);
IkReal x188=(r11*x175);
IkReal x189=(r01*x175);
IkReal x190=(px*x172);
IkReal x191=((0.0139026039798465)+x111);
IkReal x192=((-0.0139026039798465)+x111);
IkReal x193=((0.016)+x83);
IkReal x194=((-0.614961124925588)+x140);
IkReal x195=(x93+x94);
IkReal x196=(x116+x114);
IkReal x197=(x105+x106);
IkReal x198=(x83+x84);
IkReal x199=(x112+x115);
IkReal x200=(x157+x159);
IkReal x201=(x154+x147);
IkReal x202=(x131+x130);
IkReal x203=(x155+x153);
IkReal x204=(x86+x85);
IkReal x205=(x164+x165);
IkReal x206=(x135+x139);
IkReal x207=(x100+x101);
IkReal x208=(x88+x89);
IkReal x209=(x90+x97);
IkReal x210=(x122+x118);
IkReal x211=(x137+x136);
IkReal x212=(x132+x129);
IkReal x213=(x169+x190);
IkReal x214=(x177+x92);
IkReal x215=(x102+x180);
IkReal x216=(x113+x180);
IkReal x217=(x162+x188);
IkReal x218=(x87+x91+x96);
IkReal x219=((-0.079520835119688)+x214);
IkReal x220=(x208+x95);
IkReal x221=(x127+x125+x128);
IkReal x222=(x87+x91+x90);
IkReal x223=(x108+x109+x103);
IkReal x224=(x151+x150+x149);
IkReal x225=(x126+x127+x125);
IkReal x226=(x178+x99+x98);
IkReal x227=(x134+x138+x183);
IkReal x228=(x141+x143+x184);
IkReal x229=((0.016)+(((-1.0)*x198))+x204);
IkReal x230=((0.016)+(((-1.0)*x198))+(((-1.0)*x204)));
IkReal x231=(x193+x204+(((-1.0)*x84)));
IkReal x232=(x193+(((-1.0)*x204))+(((-1.0)*x84)));
IkReal x233=(x124+x123+x121+x119);
IkReal x234=(x109+x103+x199);
IkReal x235=(x207+x97+x96);
IkReal x236=(x142+x228);
IkReal x237=(x160+x156+x158+x187);
IkReal x238=(x186+x224);
IkReal x239=(x163+x166+x167+x189);
IkReal x240=(x144+x227);
IkReal x241=(x179+x113+x110+x104+x107);
IkReal x242=(x179+x110+x104+x107+x102);
IkReal x243=(x152+x145+x146+x148+x185);
IkReal x244=(x195+x226+x207+x90);
op[0]=x229;
op[1]=x229;
op[2]=x176;
op[3]=x176;
op[4]=x230;
op[5]=x230;
op[6]=(x195+(((-1.0)*x208))+(((-1.0)*x209))+x219+x207+x95+x96+(((-1.0)*x91))+(((-1.0)*x87))+(((-1.0)*x226)));
op[7]=((((-1.0)*x197))+x108+x191+x196+(((-1.0)*x234))+x241+(((-1.0)*x215)));
op[8]=(x128+(((-1.0)*x202))+x212+(((-1.0)*x225)));
op[9]=((((-1.0)*x120))+x117+(((-1.0)*x233))+x210);
op[10]=(x195+(((-1.0)*x235))+x219+x220+x222+(((-1.0)*x226)));
op[11]=((((-1.0)*x199))+(((-1.0)*x196))+x191+x197+x223+x242+(((-1.0)*x216)));
op[12]=((((-1.0)*x197))+x199+x192+x196+x242+(((-1.0)*x216))+(((-1.0)*x223)));
op[13]=((-0.079520835119688)+x195+(((-1.0)*x207))+(((-1.0)*x209))+x218+x226+x208+(((-1.0)*x95))+(((-1.0)*x214)));
op[14]=((((-1.0)*x120))+x117+(((-1.0)*x233))+(((-1.0)*x210)));
op[15]=((((-1.0)*x128))+(((-1.0)*x202))+x225+(((-1.0)*x212)));
op[16]=((((-1.0)*x108))+(((-1.0)*x196))+x192+x197+x234+x241+(((-1.0)*x215)));
op[17]=((-0.079520835119688)+x244+(((-1.0)*x97))+(((-1.0)*x218))+(((-1.0)*x214))+(((-1.0)*x220)));
op[18]=0;
op[19]=x229;
op[20]=0;
op[21]=x176;
op[22]=0;
op[23]=x230;
op[24]=x133;
op[25]=x133;
op[26]=x181;
op[27]=x181;
op[28]=x182;
op[29]=x182;
op[30]=(x194+(((-1.0)*x206))+x211+x236+(((-1.0)*x240)));
op[31]=((0.10751347077748)+(((-1.0)*x201))+x238+x203+(((-1.0)*x243)));
op[32]=((((-1.0)*x168))+(((-1.0)*x239))+x213+x205);
op[33]=(x161+(((-1.0)*x200))+x237+(((-1.0)*x217)));
op[34]=((((-1.0)*x144))+x194+(((-1.0)*x236))+x211+x227+x206);
op[35]=((0.10751347077748)+(((-1.0)*x154))+(((-1.0)*x186))+x147+(((-1.0)*x203))+x224+x243);
op[36]=((-0.10751347077748)+(((-1.0)*x203))+x238+x201+(((-1.0)*x243)));
op[37]=(x142+x194+(((-1.0)*x206))+x240+(((-1.0)*x211))+(((-1.0)*x228)));
op[38]=((((-1.0)*x161))+x237+x200+(((-1.0)*x217)));
op[39]=((((-1.0)*x168))+x239+x205+(((-1.0)*x213)));
op[40]=((-0.10751347077748)+(((-1.0)*x147))+(((-1.0)*x186))+x154+x224+x203+x243);
op[41]=((((-1.0)*x142))+x144+x194+x228+x206+(((-1.0)*x211))+(((-1.0)*x227)));
op[42]=0;
op[43]=x133;
op[44]=0;
op[45]=x181;
op[46]=0;
op[47]=x182;
op[48]=x231;
op[49]=x231;
op[50]=x176;
op[51]=x176;
op[52]=x232;
op[53]=x232;
op[54]=((-0.079520835119688)+(((-1.0)*x195))+(((-1.0)*x207))+(((-1.0)*x208))+x226+x209+x87+x91+x95+(((-1.0)*x96))+(((-1.0)*x214)));
op[55]=((((-1.0)*x108))+(((-1.0)*x196))+(((-1.0)*x197))+x191+x215+x234+(((-1.0)*x241)));
op[56]=((((-1.0)*x126))+x221+x202+(((-1.0)*x212)));
op[57]=((((-1.0)*x120))+x117+x233+(((-1.0)*x210)));
op[58]=((-0.079520835119688)+(((-1.0)*x195))+x220+x226+x235+(((-1.0)*x214))+(((-1.0)*x222)));
op[59]=(x199+x191+x197+x196+x216+(((-1.0)*x242))+(((-1.0)*x223)));
op[60]=((((-1.0)*x199))+(((-1.0)*x196))+(((-1.0)*x197))+x192+x216+x223+(((-1.0)*x242)));
op[61]=((((-1.0)*x195))+x219+x207+x209+x208+(((-1.0)*x95))+(((-1.0)*x218))+(((-1.0)*x226)));
op[62]=((((-1.0)*x120))+x117+x210+x233);
op[63]=(x126+x212+x202+(((-1.0)*x221)));
op[64]=(x108+x192+x197+x196+(((-1.0)*x234))+x215+(((-1.0)*x241)));
op[65]=(x218+x219+x97+(((-1.0)*x244))+(((-1.0)*x220)));
op[66]=0;
op[67]=x231;
op[68]=0;
op[69]=x176;
op[70]=0;
op[71]=x232;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj1 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj1)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x245=htj5*htj5;
CheckValue<IkReal> x246=IKPowWithIntegerCheck(((1.0)+x245),-1);
if(!x246.valid){
continue;
}
cj5array[numsolutions]=((x246.value)*(((1.0)+(((-1.0)*x245)))));
CheckValue<IkReal> x247=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x247.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x247.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x248=htj6*htj6;
CheckValue<IkReal> x249=IKPowWithIntegerCheck(((1.0)+x248),-1);
if(!x249.valid){
continue;
}
cj6array[numsolutions]=((x249.value)*(((1.0)+(((-1.0)*x248)))));
CheckValue<IkReal> x250=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x250.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x250.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x251=htj1*htj1;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((1.0)+x251),-1);
if(!x252.valid){
continue;
}
cj1array[numsolutions]=((x252.value)*(((1.0)+(((-1.0)*x251)))));
CheckValue<IkReal> x253=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x253.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x253.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj1 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij5]-cj1array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij5]-sj1array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij1[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j1 = j1array[ij5]; cj1 = cj1array[ij5]; sj1 = sj1array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((((-1.0)*r21*sj5*sj6))+(((-1.0)*cj5*r22))+((cj6*r20*sj5)));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((0.016)+(((-0.029)*r21*sj6))+(((0.124915)*cj6*r21))+(((0.124915)*r20*sj6))+(((-1.0)*pz))+(((0.029)*cj6*r20))+(((0.0075)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x254=cj6*cj6;
IkReal x255=r20*r20;
IkReal x256=cj5*cj5;
IkReal x257=r21*r21;
IkReal x258=r22*r22;
IkReal x259=(r22*sj5);
IkReal x260=((1.0)*sj3);
IkReal x261=(r20*sj6);
IkReal x262=(cj6*r21);
IkReal x263=((2.0)*cj5);
IkReal x264=(r21*sj6);
IkReal x265=(cj6*r20);
IkReal x266=((1.0)*x256);
IkReal x267=(x254*x257);
IkReal x268=(x254*x255);
IkReal x269=((((-1.0)*x268))+(((-2.0)*x256*x261*x262))+((x259*x263*x265))+(((-1.0)*x258*x266))+((x256*x257))+x258+x255+x267+(((-1.0)*x259*x263*x264))+((x256*x268))+(((-1.0)*x266*x267))+(((2.0)*x261*x262)));
j4eval[0]=x269;
j4eval[1]=((IKabs(((((-1.0)*x260*x261))+(((-1.0)*x260*x262)))))+(IKabs((((sj3*x259))+((cj5*sj3*x265))+(((-1.0)*cj5*x260*x264))))));
j4eval[2]=IKsign(x269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x270=cj3*cj3;
j2eval[0]=((1.0)+(((-1.0)*x270))+(((-9.0)*sj3)));
j2eval[1]=IKsign(((0.0075)+(((-0.0675)*sj3))+(((-0.0075)*x270))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x271=(cj1*sj6);
IkReal x272=((0.0548865193447515)*r10);
IkReal x273=((0.0728842814726622)*r11);
IkReal x274=((0.0127423372773309)*r01);
IkReal x275=((0.0728842814726622)*sj1);
IkReal x276=(cj6*r10);
IkReal x277=((0.0127423372773309)*sj1);
IkReal x278=(cj6*r00);
IkReal x279=((0.0728842814726622)*cj1);
IkReal x280=((0.313942759315779)*sj1);
IkReal x281=(cj6*r11);
IkReal x282=(r00*sj6);
IkReal x283=(cj6*r01);
IkReal x284=((0.313942759315779)*cj1);
IkReal x285=((2.51325108526422)*px);
IkReal x286=(sj1*sj6);
IkReal x287=((0.439390940597618)*cj1);
IkReal x288=((0.0127423372773309)*cj1);
IkReal x289=(py*sj1);
IkReal x290=((0.0548865193447515)*sj1);
IkReal x291=((0.0548865193447515)*cj1);
if( IKabs(((-0.137309668936756)+(((-1.0)*x271*x272))+(((-1.0)*x276*x288))+(((-0.439390940597618)*px*sj1))+((x282*x290))+(((-1.0)*x280*x281))+((x283*x290))+(((0.0728842814726622)*r01*x271))+(((-1.0)*r10*sj6*x280))+((x273*x286))+(((0.0127423372773309)*r11*x271))+((x277*x278))+(((-1.0)*x278*x279))+(((-1.0)*x275*x276))+((cj1*x285))+(((-1.0)*x281*x291))+(((-0.313942759315779)*r00*x271))+((py*x287))+(((2.51325108526422)*x289))+(((-1.0)*x274*x286))+(((-1.0)*x283*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.785390964145067)+(((-1.0)*sj1*x285))+((x275*x278))+((x271*x273))+(((-1.0)*r11*sj6*x277))+((x278*x288))+(((-1.0)*x271*x274))+(((-0.439390940597618)*x289))+((x281*x290))+(((-1.0)*px*x287))+((x283*x291))+(((-1.0)*x281*x284))+(((-1.0)*r01*sj6*x275))+(((2.51325108526422)*cj1*py))+((x272*x286))+((x276*x277))+((x280*x283))+((x280*x282))+(((-0.313942759315779)*r10*x271))+(((0.0548865193447515)*r00*x271))+(((-1.0)*x276*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.137309668936756)+(((-1.0)*x271*x272))+(((-1.0)*x276*x288))+(((-0.439390940597618)*px*sj1))+((x282*x290))+(((-1.0)*x280*x281))+((x283*x290))+(((0.0728842814726622)*r01*x271))+(((-1.0)*r10*sj6*x280))+((x273*x286))+(((0.0127423372773309)*r11*x271))+((x277*x278))+(((-1.0)*x278*x279))+(((-1.0)*x275*x276))+((cj1*x285))+(((-1.0)*x281*x291))+(((-0.313942759315779)*r00*x271))+((py*x287))+(((2.51325108526422)*x289))+(((-1.0)*x274*x286))+(((-1.0)*x283*x284))))+IKsqr(((-0.785390964145067)+(((-1.0)*sj1*x285))+((x275*x278))+((x271*x273))+(((-1.0)*r11*sj6*x277))+((x278*x288))+(((-1.0)*x271*x274))+(((-0.439390940597618)*x289))+((x281*x290))+(((-1.0)*px*x287))+((x283*x291))+(((-1.0)*x281*x284))+(((-1.0)*r01*sj6*x275))+(((2.51325108526422)*cj1*py))+((x272*x286))+((x276*x277))+((x280*x283))+((x280*x282))+(((-0.313942759315779)*r10*x271))+(((0.0548865193447515)*r00*x271))+(((-1.0)*x276*x279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.137309668936756)+(((-1.0)*x271*x272))+(((-1.0)*x276*x288))+(((-0.439390940597618)*px*sj1))+((x282*x290))+(((-1.0)*x280*x281))+((x283*x290))+(((0.0728842814726622)*r01*x271))+(((-1.0)*r10*sj6*x280))+((x273*x286))+(((0.0127423372773309)*r11*x271))+((x277*x278))+(((-1.0)*x278*x279))+(((-1.0)*x275*x276))+((cj1*x285))+(((-1.0)*x281*x291))+(((-0.313942759315779)*r00*x271))+((py*x287))+(((2.51325108526422)*x289))+(((-1.0)*x274*x286))+(((-1.0)*x283*x284))), ((-0.785390964145067)+(((-1.0)*sj1*x285))+((x275*x278))+((x271*x273))+(((-1.0)*r11*sj6*x277))+((x278*x288))+(((-1.0)*x271*x274))+(((-0.439390940597618)*x289))+((x281*x290))+(((-1.0)*px*x287))+((x283*x291))+(((-1.0)*x281*x284))+(((-1.0)*r01*sj6*x275))+(((2.51325108526422)*cj1*py))+((x272*x286))+((x276*x277))+((x280*x283))+((x280*x282))+(((-0.313942759315779)*r10*x271))+(((0.0548865193447515)*r00*x271))+(((-1.0)*x276*x279))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x292=IKsin(j2);
IkReal x293=IKcos(j2);
IkReal x294=((0.38609)*sj1);
IkReal x295=((0.029)*cj6);
IkReal x296=((0.124915)*cj6);
IkReal x297=((0.029)*sj6);
IkReal x298=((0.124915)*sj6);
IkReal x299=((0.0675)*x293);
IkReal x300=(cj1*x292);
evalcond[0]=((((-1.0)*cj1*x299))+(((-0.3125)*sj1))+(((-0.0675)*sj1*x292))+(((-1.0)*x293*x294))+(((-1.0)*px))+((r01*x296))+((r00*x295))+((r00*x298))+(((0.38609)*x300))+(((-1.0)*r01*x297)));
evalcond[1]=((((0.3125)*cj1))+(((-1.0)*py))+(((0.38609)*cj1*x293))+(((0.0675)*x300))+(((-1.0)*sj1*x299))+((r10*x295))+((r10*x298))+(((-1.0)*r11*x297))+((x292*x294))+((r11*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x301=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x301;
j4eval[1]=IKsign(x301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x302=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x302;
j4eval[1]=IKsign(x302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x303=cj5*cj5;
IkReal x304=cj6*cj6;
IkReal x305=(r02*r22);
IkReal x306=(cj6*r00);
IkReal x307=(cj6*r20);
IkReal x308=((1.0)*r21);
IkReal x309=((1.0)*r00*r20);
IkReal x310=(cj5*sj5*sj6);
IkReal x311=((1.0)*cj5*sj5);
IkReal x312=(r01*x303);
IkReal x313=(x303*x304);
IkReal x314=((((-1.0)*r02*x307*x311))+(((-1.0)*sj6*x306*x308))+((r02*r21*x310))+((r21*x304*x312))+(((-1.0)*r01*x304*x308))+((x303*x305))+((sj6*x307*x312))+(((-1.0)*x305))+((r00*r20*x304))+(((-1.0)*x308*x312))+((r21*sj6*x303*x306))+(((-1.0)*r22*x306*x311))+(((-1.0)*r01*sj6*x307))+((r01*r22*x310))+(((-1.0)*x309*x313))+(((-1.0)*x309)));
j4eval[0]=x314;
j4eval[1]=IKsign(x314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x315=cj5*cj5;
IkReal x316=cj6*cj6;
IkReal x317=(cj6*r20);
IkReal x318=(cj2*sj1);
IkReal x319=(cj5*r21);
IkReal x320=(r22*sj5);
IkReal x321=(r01*r21);
IkReal x322=(cj6*r21);
IkReal x323=((1.0)*sj6);
IkReal x324=(r02*r22);
IkReal x325=((1.0)*cj5);
IkReal x326=((1.0)*r00*r20);
IkReal x327=(cj5*sj5*sj6);
IkReal x328=(cj1*sj2*sj6);
IkReal x329=((1.0)*cj1*sj2);
IkReal x330=(sj6*x315);
IkReal x331=(x315*x316);
CheckValue<IkReal> x332 = IKatan2WithCheck(IkReal((((x318*x320))+(((-1.0)*x318*x319*x323))+(((-1.0)*x320*x329))+((cj5*x317*x318))+(((-1.0)*cj1*sj2*x317*x325))+((x319*x328)))),IkReal((((x318*x322))+((r20*sj6*x318))+(((-1.0)*x322*x329))+(((-1.0)*cj1*r20*sj2*x323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333=IKPowWithIntegerCheck(IKsign((((r02*sj5*sj6*x319))+((r00*x322*x330))+(((-1.0)*r02*sj5*x317*x325))+((r00*r20*x316))+((cj5*r01*sj6*x320))+(((-1.0)*r00*x322*x323))+(((-1.0)*x326))+(((-1.0)*x324))+(((-1.0)*x315*x321))+(((-1.0)*cj6*r00*x320*x325))+((x315*x324))+((r01*x317*x330))+(((-1.0)*r01*x317*x323))+(((-1.0)*x316*x321))+(((-1.0)*x326*x331))+((x321*x331)))),-1);
if(!x333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x332.value)+(((1.5707963267949)*(x333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x334=IKsin(j4);
IkReal x335=IKcos(j4);
IkReal x336=(cj1*sj2);
IkReal x337=((1.0)*r00);
IkReal x338=(cj5*r01);
IkReal x339=(sj1*sj2);
IkReal x340=(cj5*r11);
IkReal x341=((1.0)*cj2);
IkReal x342=((1.0)*cj5);
IkReal x343=(cj5*r21);
IkReal x344=(sj1*x341);
IkReal x345=(cj6*x334);
IkReal x346=(sj6*x335);
IkReal x347=(sj6*x334);
IkReal x348=(cj6*x335);
IkReal x349=((1.0)*sj5*x334);
IkReal x350=((1.0)*sj5*x335);
evalcond[0]=(((r21*x345))+(((-1.0)*r22*x350))+((r20*x347))+(((-1.0)*r20*x342*x348))+((x343*x346)));
evalcond[1]=((((-1.0)*r22*x349))+(((-1.0)*r21*x348))+(((-1.0)*r20*x346))+(((-1.0)*r20*x342*x345))+((x343*x347)));
evalcond[2]=((((-1.0)*r12*x350))+(((-1.0)*r10*x342*x348))+x336+((x340*x346))+(((-1.0)*x344))+((r11*x345))+((r10*x347)));
evalcond[3]=((((-1.0)*r12*x349))+(((-1.0)*r10*x346))+(((-1.0)*r11*x348))+(((-1.0)*r10*x342*x345))+x339+((cj1*cj2))+((x340*x347)));
evalcond[4]=(((r01*x345))+((r00*x347))+(((-1.0)*cj1*x341))+(((-1.0)*cj5*x337*x348))+(((-1.0)*x339))+((x338*x346))+(((-1.0)*r02*x350)));
evalcond[5]=((((-1.0)*r02*x349))+(((-1.0)*x337*x346))+(((-1.0)*cj5*x337*x345))+x336+((x338*x347))+(((-1.0)*x344))+(((-1.0)*r01*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x351=(cj2*sj1);
IkReal x352=(r22*sj5);
IkReal x353=((1.0)*cj5);
IkReal x354=(cj6*r20);
IkReal x355=(cj1*sj2);
IkReal x356=((1.0)*sj6);
IkReal x357=(r21*sj6);
IkReal x358=(cj6*r21);
CheckValue<IkReal> x359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x356))+((cj6*r00*sj5))+(((-1.0)*r02*x353)))),-1);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal((((cj5*x351*x354))+(((-1.0)*x352*x355))+((cj5*x355*x357))+((x351*x352))+(((-1.0)*x353*x354*x355))+(((-1.0)*x351*x353*x357)))),IkReal((((x351*x358))+(((-1.0)*r20*x355*x356))+((r20*sj6*x351))+(((-1.0)*x355*x358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x359.value)))+(x360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x361=IKsin(j4);
IkReal x362=IKcos(j4);
IkReal x363=(cj1*sj2);
IkReal x364=((1.0)*r00);
IkReal x365=(cj5*r01);
IkReal x366=(sj1*sj2);
IkReal x367=(cj5*r11);
IkReal x368=((1.0)*cj2);
IkReal x369=((1.0)*cj5);
IkReal x370=(cj5*r21);
IkReal x371=(sj1*x368);
IkReal x372=(cj6*x361);
IkReal x373=(sj6*x362);
IkReal x374=(sj6*x361);
IkReal x375=(cj6*x362);
IkReal x376=((1.0)*sj5*x361);
IkReal x377=((1.0)*sj5*x362);
evalcond[0]=(((x370*x373))+((r20*x374))+(((-1.0)*r20*x369*x375))+((r21*x372))+(((-1.0)*r22*x377)));
evalcond[1]=(((x370*x374))+(((-1.0)*r20*x373))+(((-1.0)*r21*x375))+(((-1.0)*r20*x369*x372))+(((-1.0)*r22*x376)));
evalcond[2]=(((x367*x373))+(((-1.0)*x371))+x363+(((-1.0)*r12*x377))+((r11*x372))+((r10*x374))+(((-1.0)*r10*x369*x375)));
evalcond[3]=((((-1.0)*r11*x375))+((x367*x374))+x366+(((-1.0)*r12*x376))+(((-1.0)*r10*x373))+((cj1*cj2))+(((-1.0)*r10*x369*x372)));
evalcond[4]=((((-1.0)*x366))+((r00*x374))+((r01*x372))+(((-1.0)*r02*x377))+(((-1.0)*cj1*x368))+((x365*x373))+(((-1.0)*cj5*x364*x375)));
evalcond[5]=((((-1.0)*r02*x376))+(((-1.0)*x371))+(((-1.0)*r01*x375))+((x365*x374))+x363+(((-1.0)*cj5*x364*x372))+(((-1.0)*x364*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x378=(sj1*sj2);
IkReal x379=(r22*sj5);
IkReal x380=(cj1*cj2);
IkReal x381=(r20*sj6);
IkReal x382=(r21*x378);
IkReal x383=((1.0)*cj5*sj6);
IkReal x384=(cj5*cj6*r20);
CheckValue<IkReal> x385=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))),-1);
if(!x385.valid){
continue;
}
CheckValue<IkReal> x386 = IKatan2WithCheck(IkReal((((x378*x384))+((x379*x380))+((x378*x379))+((x380*x384))+(((-1.0)*r21*x380*x383))+(((-1.0)*x382*x383)))),IkReal((((x378*x381))+((cj6*r21*x380))+((cj6*x382))+((x380*x381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x385.value)))+(x386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x387=IKsin(j4);
IkReal x388=IKcos(j4);
IkReal x389=(cj1*sj2);
IkReal x390=((1.0)*r00);
IkReal x391=(cj5*r01);
IkReal x392=(sj1*sj2);
IkReal x393=(cj5*r11);
IkReal x394=((1.0)*cj2);
IkReal x395=((1.0)*cj5);
IkReal x396=(cj5*r21);
IkReal x397=(sj1*x394);
IkReal x398=(cj6*x387);
IkReal x399=(sj6*x388);
IkReal x400=(sj6*x387);
IkReal x401=(cj6*x388);
IkReal x402=((1.0)*sj5*x387);
IkReal x403=((1.0)*sj5*x388);
evalcond[0]=(((x396*x399))+(((-1.0)*r20*x395*x401))+((r20*x400))+((r21*x398))+(((-1.0)*r22*x403)));
evalcond[1]=((((-1.0)*r20*x399))+(((-1.0)*r21*x401))+(((-1.0)*r20*x395*x398))+((x396*x400))+(((-1.0)*r22*x402)));
evalcond[2]=((((-1.0)*x397))+x389+((r11*x398))+(((-1.0)*r10*x395*x401))+((r10*x400))+(((-1.0)*r12*x403))+((x393*x399)));
evalcond[3]=((((-1.0)*r11*x401))+((x393*x400))+x392+((cj1*cj2))+(((-1.0)*r10*x395*x398))+(((-1.0)*r10*x399))+(((-1.0)*r12*x402)));
evalcond[4]=((((-1.0)*x392))+(((-1.0)*cj5*x390*x401))+(((-1.0)*r02*x403))+((r01*x398))+(((-1.0)*cj1*x394))+((x391*x399))+((r00*x400)));
evalcond[5]=((((-1.0)*x397))+(((-1.0)*r01*x401))+(((-1.0)*r02*x402))+x389+(((-1.0)*cj5*x390*x398))+(((-1.0)*x390*x399))+((x391*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x404=(cj1*sj6);
IkReal x405=((0.0548865193447515)*r10);
IkReal x406=((0.0728842814726622)*r11);
IkReal x407=((0.0127423372773309)*r01);
IkReal x408=((0.0728842814726622)*sj1);
IkReal x409=(cj6*r10);
IkReal x410=((0.0127423372773309)*sj1);
IkReal x411=(cj6*r00);
IkReal x412=((0.0728842814726622)*cj1);
IkReal x413=((0.313942759315779)*sj1);
IkReal x414=(cj6*r11);
IkReal x415=(r00*sj6);
IkReal x416=(cj6*r01);
IkReal x417=((0.313942759315779)*cj1);
IkReal x418=((2.51325108526422)*px);
IkReal x419=(sj1*sj6);
IkReal x420=((0.439390940597618)*cj1);
IkReal x421=((0.0127423372773309)*cj1);
IkReal x422=(py*sj1);
IkReal x423=((0.0548865193447515)*sj1);
IkReal x424=((0.0548865193447515)*cj1);
if( IKabs(((-0.137309668936756)+(((2.51325108526422)*x422))+(((-0.439390940597618)*px*sj1))+((x410*x411))+((x415*x423))+((x406*x419))+(((-0.313942759315779)*r00*x404))+((x416*x423))+(((0.0127423372773309)*r11*x404))+((py*x420))+(((-1.0)*x404*x405))+(((-1.0)*x416*x417))+(((-1.0)*x409*x421))+(((-1.0)*x407*x419))+(((-1.0)*x411*x412))+(((-1.0)*x413*x414))+(((-1.0)*x414*x424))+(((0.0728842814726622)*r01*x404))+((cj1*x418))+(((-1.0)*r10*sj6*x413))+(((-1.0)*x408*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.785390964145067)+(((-1.0)*px*x420))+((x405*x419))+((x404*x406))+((x414*x423))+((x413*x416))+((x413*x415))+(((-1.0)*r01*sj6*x408))+((x411*x421))+((x408*x411))+((x409*x410))+((x416*x424))+(((2.51325108526422)*cj1*py))+(((-1.0)*x404*x407))+(((-0.313942759315779)*r10*x404))+(((-0.439390940597618)*x422))+(((0.0548865193447515)*r00*x404))+(((-1.0)*r11*sj6*x410))+(((-1.0)*x414*x417))+(((-1.0)*sj1*x418))+(((-1.0)*x409*x412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.137309668936756)+(((2.51325108526422)*x422))+(((-0.439390940597618)*px*sj1))+((x410*x411))+((x415*x423))+((x406*x419))+(((-0.313942759315779)*r00*x404))+((x416*x423))+(((0.0127423372773309)*r11*x404))+((py*x420))+(((-1.0)*x404*x405))+(((-1.0)*x416*x417))+(((-1.0)*x409*x421))+(((-1.0)*x407*x419))+(((-1.0)*x411*x412))+(((-1.0)*x413*x414))+(((-1.0)*x414*x424))+(((0.0728842814726622)*r01*x404))+((cj1*x418))+(((-1.0)*r10*sj6*x413))+(((-1.0)*x408*x409))))+IKsqr(((-0.785390964145067)+(((-1.0)*px*x420))+((x405*x419))+((x404*x406))+((x414*x423))+((x413*x416))+((x413*x415))+(((-1.0)*r01*sj6*x408))+((x411*x421))+((x408*x411))+((x409*x410))+((x416*x424))+(((2.51325108526422)*cj1*py))+(((-1.0)*x404*x407))+(((-0.313942759315779)*r10*x404))+(((-0.439390940597618)*x422))+(((0.0548865193447515)*r00*x404))+(((-1.0)*r11*sj6*x410))+(((-1.0)*x414*x417))+(((-1.0)*sj1*x418))+(((-1.0)*x409*x412))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.137309668936756)+(((2.51325108526422)*x422))+(((-0.439390940597618)*px*sj1))+((x410*x411))+((x415*x423))+((x406*x419))+(((-0.313942759315779)*r00*x404))+((x416*x423))+(((0.0127423372773309)*r11*x404))+((py*x420))+(((-1.0)*x404*x405))+(((-1.0)*x416*x417))+(((-1.0)*x409*x421))+(((-1.0)*x407*x419))+(((-1.0)*x411*x412))+(((-1.0)*x413*x414))+(((-1.0)*x414*x424))+(((0.0728842814726622)*r01*x404))+((cj1*x418))+(((-1.0)*r10*sj6*x413))+(((-1.0)*x408*x409))), ((-0.785390964145067)+(((-1.0)*px*x420))+((x405*x419))+((x404*x406))+((x414*x423))+((x413*x416))+((x413*x415))+(((-1.0)*r01*sj6*x408))+((x411*x421))+((x408*x411))+((x409*x410))+((x416*x424))+(((2.51325108526422)*cj1*py))+(((-1.0)*x404*x407))+(((-0.313942759315779)*r10*x404))+(((-0.439390940597618)*x422))+(((0.0548865193447515)*r00*x404))+(((-1.0)*r11*sj6*x410))+(((-1.0)*x414*x417))+(((-1.0)*sj1*x418))+(((-1.0)*x409*x412))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x425=IKsin(j2);
IkReal x426=IKcos(j2);
IkReal x427=((0.38609)*sj1);
IkReal x428=((0.029)*cj6);
IkReal x429=((0.124915)*cj6);
IkReal x430=((0.029)*sj6);
IkReal x431=((0.124915)*sj6);
IkReal x432=((0.0675)*x426);
IkReal x433=(cj1*x425);
evalcond[0]=((((0.38609)*x433))+(((-0.3125)*sj1))+(((-1.0)*cj1*x432))+(((-1.0)*px))+((r00*x428))+(((-1.0)*x426*x427))+((r01*x429))+((r00*x431))+(((-0.0675)*sj1*x425))+(((-1.0)*r01*x430)));
evalcond[1]=((((-1.0)*sj1*x432))+((x425*x427))+(((0.38609)*cj1*x426))+(((-1.0)*r11*x430))+(((0.3125)*cj1))+(((-1.0)*py))+((r10*x428))+(((0.0675)*x433))+((r10*x431))+((r11*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x434=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x434;
j4eval[1]=IKsign(x434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x435=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x435;
j4eval[1]=IKsign(x435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x436=cj5*cj5;
IkReal x437=cj6*cj6;
IkReal x438=(r00*r20);
IkReal x439=((1.0)*r21);
IkReal x440=(cj6*r20);
IkReal x441=(r01*sj6);
IkReal x442=(r02*r22);
IkReal x443=(cj6*r00);
IkReal x444=(r01*r21);
IkReal x445=(cj5*r02*sj5);
IkReal x446=((1.0)*x436);
IkReal x447=(cj5*r22*sj5);
IkReal x448=(x436*x437);
IkReal x449=((((-1.0)*r01*x439*x448))+(((-1.0)*sj6*x439*x445))+(((-1.0)*x440*x441*x446))+((x440*x445))+((x440*x441))+x438+x442+(((-1.0)*x437*x438))+((x438*x448))+(((-1.0)*x441*x447))+((x443*x447))+(((-1.0)*sj6*x436*x439*x443))+((x437*x444))+((x436*x444))+(((-1.0)*x442*x446))+((r21*sj6*x443)));
j4eval[0]=x449;
j4eval[1]=IKsign(x449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x450=cj5*cj5;
IkReal x451=cj6*cj6;
IkReal x452=(r00*r20);
IkReal x453=((1.0)*r21);
IkReal x454=(cj5*cj6);
IkReal x455=(r22*sj5);
IkReal x456=((1.0)*sj6);
IkReal x457=(cj1*cj2);
IkReal x458=(sj1*sj2);
IkReal x459=(cj5*sj6);
IkReal x460=(r02*sj5);
IkReal x461=(r01*r21);
IkReal x462=(r02*r22);
IkReal x463=(r20*x457);
IkReal x464=(cj6*r01*r20);
IkReal x465=(cj6*r00*sj6);
IkReal x466=(x450*x451);
CheckValue<IkReal> x467=IKPowWithIntegerCheck(IKsign((((r20*x454*x460))+((sj6*x464))+((x452*x466))+(((-1.0)*cj5*r01*x455*x456))+(((-1.0)*r01*x453*x466))+(((-1.0)*x450*x456*x464))+(((-1.0)*x450*x462))+(((-1.0)*x450*x453*x465))+x452+x462+((r00*x454*x455))+((x450*x461))+(((-1.0)*x453*x459*x460))+((r21*x465))+((x451*x461))+(((-1.0)*x451*x452)))),-1);
if(!x467.valid){
continue;
}
CheckValue<IkReal> x468 = IKatan2WithCheck(IkReal(((((-1.0)*x456*x463))+(((-1.0)*cj6*x453*x458))+(((-1.0)*cj6*x453*x457))+(((-1.0)*r20*x456*x458)))),IkReal(((((-1.0)*x453*x458*x459))+((x455*x457))+((x455*x458))+((x454*x463))+(((-1.0)*x453*x457*x459))+((r20*x454*x458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x467.value)))+(x468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x469=IKsin(j4);
IkReal x470=IKcos(j4);
IkReal x471=(sj1*sj2);
IkReal x472=(cj1*cj2);
IkReal x473=((1.0)*r00);
IkReal x474=(cj5*r01);
IkReal x475=(cj5*r11);
IkReal x476=((1.0)*cj5);
IkReal x477=(cj1*sj2);
IkReal x478=(cj2*sj1);
IkReal x479=(cj5*r21);
IkReal x480=(cj6*x469);
IkReal x481=(sj6*x470);
IkReal x482=(sj6*x469);
IkReal x483=(cj6*x470);
IkReal x484=(x471+x472);
IkReal x485=((1.0)*sj5*x469);
IkReal x486=((1.0)*sj5*x470);
evalcond[0]=(((r20*x482))+(((-1.0)*r20*x476*x483))+((r21*x480))+(((-1.0)*r22*x486))+((x479*x481)));
evalcond[1]=((((-1.0)*r20*x481))+(((-1.0)*r20*x476*x480))+(((-1.0)*r21*x483))+(((-1.0)*r22*x485))+((x479*x482)));
evalcond[2]=((((-1.0)*cj5*x473*x483))+((x474*x481))+x484+((r01*x480))+((r00*x482))+(((-1.0)*r02*x486)));
evalcond[3]=((((-1.0)*r10*x476*x483))+((x475*x481))+(((-1.0)*x477))+((r10*x482))+((r11*x480))+x478+(((-1.0)*r12*x486)));
evalcond[4]=((((-1.0)*r10*x476*x480))+(((-1.0)*r11*x483))+((x475*x482))+(((-1.0)*r10*x481))+x484+(((-1.0)*r12*x485)));
evalcond[5]=((((-1.0)*cj5*x473*x480))+(((-1.0)*x478))+((x474*x482))+(((-1.0)*r01*x483))+x477+(((-1.0)*x473*x481))+(((-1.0)*r02*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x487=(cj5*sj6);
IkReal x488=((1.0)*cj6);
IkReal x489=(sj1*sj2);
IkReal x490=(cj5*r20);
IkReal x491=(cj1*cj2);
IkReal x492=(r21*x491);
IkReal x493=((1.0)*r20*sj6);
IkReal x494=((1.0)*r22*sj5);
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal((((r21*x487*x489))+(((-1.0)*x488*x489*x490))+(((-1.0)*x489*x494))+(((-1.0)*x491*x494))+(((-1.0)*x488*x490*x491))+((x487*x492)))),IkReal(((((-1.0)*x488*x492))+(((-1.0)*x489*x493))+(((-1.0)*x491*x493))+(((-1.0)*r21*x488*x489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x488))+((r11*sj5*sj6)))),-1);
if(!x496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x495.value)+(((1.5707963267949)*(x496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x497=IKsin(j4);
IkReal x498=IKcos(j4);
IkReal x499=(sj1*sj2);
IkReal x500=(cj1*cj2);
IkReal x501=((1.0)*r00);
IkReal x502=(cj5*r01);
IkReal x503=(cj5*r11);
IkReal x504=((1.0)*cj5);
IkReal x505=(cj1*sj2);
IkReal x506=(cj2*sj1);
IkReal x507=(cj5*r21);
IkReal x508=(cj6*x497);
IkReal x509=(sj6*x498);
IkReal x510=(sj6*x497);
IkReal x511=(cj6*x498);
IkReal x512=(x499+x500);
IkReal x513=((1.0)*sj5*x497);
IkReal x514=((1.0)*sj5*x498);
evalcond[0]=((((-1.0)*r22*x514))+((r21*x508))+((x507*x509))+((r20*x510))+(((-1.0)*r20*x504*x511)));
evalcond[1]=((((-1.0)*r20*x504*x508))+((x507*x510))+(((-1.0)*r22*x513))+(((-1.0)*r20*x509))+(((-1.0)*r21*x511)));
evalcond[2]=((((-1.0)*cj5*x501*x511))+((r01*x508))+x512+((x502*x509))+(((-1.0)*r02*x514))+((r00*x510)));
evalcond[3]=((((-1.0)*r10*x504*x511))+(((-1.0)*r12*x514))+((r10*x510))+x506+((x503*x509))+((r11*x508))+(((-1.0)*x505)));
evalcond[4]=((((-1.0)*r11*x511))+((x503*x510))+(((-1.0)*r12*x513))+(((-1.0)*r10*x504*x508))+x512+(((-1.0)*r10*x509)));
evalcond[5]=((((-1.0)*r01*x511))+((x502*x510))+(((-1.0)*cj5*x501*x508))+(((-1.0)*x501*x509))+x505+(((-1.0)*r02*x513))+(((-1.0)*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=((1.0)*sj6);
IkReal x516=(cj1*sj2);
IkReal x517=(r22*sj5);
IkReal x518=(cj2*sj1);
IkReal x519=((1.0)*cj6);
IkReal x520=(cj5*r20);
IkReal x521=(r21*x516);
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal((((cj6*x516*x520))+(((-1.0)*x518*x519*x520))+((cj5*r21*sj6*x518))+(((-1.0)*x517*x518))+((x516*x517))+(((-1.0)*cj5*x515*x521)))),IkReal(((((-1.0)*r21*x518*x519))+(((-1.0)*r20*x515*x518))+((r20*sj6*x516))+((cj6*x521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x515))+((cj6*r00*sj5))+(((-1.0)*cj5*r02)))),-1);
if(!x523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x522.value)+(((1.5707963267949)*(x523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x524=IKsin(j4);
IkReal x525=IKcos(j4);
IkReal x526=(sj1*sj2);
IkReal x527=(cj1*cj2);
IkReal x528=((1.0)*r00);
IkReal x529=(cj5*r01);
IkReal x530=(cj5*r11);
IkReal x531=((1.0)*cj5);
IkReal x532=(cj1*sj2);
IkReal x533=(cj2*sj1);
IkReal x534=(cj5*r21);
IkReal x535=(cj6*x524);
IkReal x536=(sj6*x525);
IkReal x537=(sj6*x524);
IkReal x538=(cj6*x525);
IkReal x539=(x526+x527);
IkReal x540=((1.0)*sj5*x524);
IkReal x541=((1.0)*sj5*x525);
evalcond[0]=((((-1.0)*r22*x541))+((r20*x537))+((x534*x536))+(((-1.0)*r20*x531*x538))+((r21*x535)));
evalcond[1]=((((-1.0)*r22*x540))+(((-1.0)*r20*x536))+(((-1.0)*r21*x538))+((x534*x537))+(((-1.0)*r20*x531*x535)));
evalcond[2]=((((-1.0)*cj5*x528*x538))+(((-1.0)*r02*x541))+x539+((x529*x536))+((r01*x535))+((r00*x537)));
evalcond[3]=((((-1.0)*x532))+((r11*x535))+((r10*x537))+x533+((x530*x536))+(((-1.0)*r10*x531*x538))+(((-1.0)*r12*x541)));
evalcond[4]=((((-1.0)*r11*x538))+x539+((x530*x537))+(((-1.0)*r10*x536))+(((-1.0)*r10*x531*x535))+(((-1.0)*r12*x540)));
evalcond[5]=((((-1.0)*cj5*x528*x535))+(((-1.0)*x533))+(((-1.0)*x528*x536))+(((-1.0)*r02*x540))+x532+(((-1.0)*r01*x538))+((x529*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x542=((0.38609)*sj5);
IkReal x543=(cj6*r10);
IkReal x544=(r11*sj6);
IkReal x545=((0.0675)*sj5);
IkReal x546=(sj1*sj3);
IkReal x547=(cj1*sj3);
IkReal x548=((0.0075)*sj5);
IkReal x549=((0.3125)*sj3);
IkReal x550=(cj5*r12);
IkReal x551=((0.124915)*cj6*r01);
IkReal x552=((0.124915)*r00*sj6);
IkReal x553=((0.0675)*x550);
IkReal x554=((0.029)*r01*sj6);
IkReal x555=((0.029)*cj6*r00);
IkReal x556=(x546*x548);
CheckValue<IkReal> x557=IKPowWithIntegerCheck(IKsign(((0.0075)+(((-0.0675)*sj3))+(((-0.0075)*(cj3*cj3))))),-1);
if(!x557.valid){
continue;
}
CheckValue<IkReal> x558 = IKatan2WithCheck(IkReal((((sj1*x542*x543))+(((-1.0)*cj1*x553))+(((0.0075)*x547*x550))+(((-1.0)*cj1*x544*x545))+((cj1*x543*x545))+((px*x546))+x549+(((-1.0)*sj1*x542*x544))+((x546*x554))+(((-0.3125)*cj1*x547))+(((-0.38609)*sj1*x550))+(((-1.0)*x546*x552))+(((-1.0)*x546*x551))+(((-1.0)*x546*x555))+((x544*x547*x548))+(((-1.0)*x543*x547*x548)))),IkReal((((sj1*x553))+(((0.3125)*cj1*x546))+(((-0.0075)*x546*x550))+((cj1*x542*x543))+(((-1.0)*x544*x556))+(((-1.0)*x547*x555))+(((-1.0)*x547*x551))+(((-1.0)*x547*x552))+(((-1.0)*sj1*x543*x545))+((px*x547))+((x547*x554))+((x543*x556))+((sj1*x544*x545))+(((-0.38609)*cj1*x550))+(((-1.0)*cj1*x542*x544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x558.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x557.value)))+(x558.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x559=IKcos(j2);
IkReal x560=IKsin(j2);
IkReal x561=((0.029)*cj6);
IkReal x562=((0.124915)*sj6);
IkReal x563=((0.0075)*sj3);
IkReal x564=(r11*sj6);
IkReal x565=((1.0)*sj5);
IkReal x566=((1.0)*sj3);
IkReal x567=((0.124915)*cj6);
IkReal x568=(r01*sj6);
IkReal x569=((1.0)*cj5);
IkReal x570=(cj6*sj5);
IkReal x571=(cj1*x563);
IkReal x572=(sj1*x559);
IkReal x573=(cj1*x559);
IkReal x574=(sj1*x560);
IkReal x575=(cj1*x560);
evalcond[0]=((((-1.0)*x564*x565))+(((-1.0)*x566*x572))+((sj3*x575))+(((-1.0)*r12*x569))+((r10*x570)));
evalcond[1]=((((-1.0)*x566*x574))+(((-1.0)*x566*x573))+((r00*x570))+(((-1.0)*r02*x569))+(((-1.0)*x565*x568)));
evalcond[2]=(((x559*x571))+(((-0.0675)*x574))+(((-0.0675)*x573))+(((-0.38609)*x572))+(((-0.3125)*sj1))+((x563*x574))+((r01*x567))+((r00*x561))+((r00*x562))+(((0.38609)*x575))+(((-1.0)*px))+(((-0.029)*x568)));
evalcond[3]=((((-0.0675)*x572))+((x563*x572))+(((0.3125)*cj1))+(((0.38609)*x574))+(((0.38609)*x573))+(((-1.0)*x560*x571))+(((-1.0)*py))+(((-0.029)*x564))+(((0.0675)*x575))+((r10*x561))+((r10*x562))+((r11*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x576=(((r01*sj5*sj6))+(((-1.0)*cj6*r00*sj5))+((cj5*r02)));
j4eval[0]=x576;
j4eval[1]=IKsign(x576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x577=cj6*cj6;
IkReal x578=r20*r20;
IkReal x579=cj5*cj5;
IkReal x580=r21*r21;
IkReal x581=r22*r22;
IkReal x582=(r22*sj5);
IkReal x583=((1.0)*sj3);
IkReal x584=(r20*sj6);
IkReal x585=(cj6*r21);
IkReal x586=((2.0)*cj5);
IkReal x587=(r21*sj6);
IkReal x588=(cj6*r20);
IkReal x589=((1.0)*x579);
IkReal x590=(x577*x580);
IkReal x591=(x577*x578);
IkReal x592=((((2.0)*x584*x585))+((x579*x580))+((x582*x586*x588))+(((-1.0)*x589*x590))+(((-1.0)*x591))+((x579*x591))+x578+x581+x590+(((-1.0)*x582*x586*x587))+(((-2.0)*x579*x584*x585))+(((-1.0)*x581*x589)));
j4eval[0]=x592;
j4eval[1]=((IKabs(((((-1.0)*x583*x585))+(((-1.0)*x583*x584)))))+(IKabs((((cj5*sj3*x588))+((sj3*x582))+(((-1.0)*cj5*x583*x587))))));
j4eval[2]=IKsign(x592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x593=cj5*cj5;
IkReal x594=cj6*cj6;
IkReal x595=(cj6*r10);
IkReal x596=((1.0)*sj6);
IkReal x597=(cj5*sj5);
IkReal x598=(cj6*r11);
IkReal x599=(r12*r22);
IkReal x600=(r21*x593);
IkReal x601=(r20*x593);
IkReal x602=(r10*x594);
IkReal x603=(r11*x594);
IkReal x604=((((-1.0)*x600*x603))+(((-1.0)*x596*x598*x601))+((x601*x602))+(((-1.0)*x593*x599))+(((-1.0)*x595*x596*x600))+((r21*x603))+(((-1.0)*r20*x602))+((r11*x600))+((r20*sj6*x598))+(((-1.0)*r11*r22*x596*x597))+x599+((r10*r20))+((cj6*r12*r20*x597))+((r22*x595*x597))+((r21*sj6*x595))+(((-1.0)*r12*r21*x596*x597)));
j4eval[0]=x604;
j4eval[1]=IKsign(x604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x605=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x605;
j4eval[1]=IKsign(x605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x606=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x606;
j4eval[1]=IKsign(x606);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x607=cj5*cj5;
IkReal x608=cj6*cj6;
IkReal x609=(r02*r22);
IkReal x610=(cj6*r00);
IkReal x611=(cj6*r20);
IkReal x612=((1.0)*r21);
IkReal x613=((1.0)*r00*r20);
IkReal x614=(cj5*sj5*sj6);
IkReal x615=((1.0)*cj5*sj5);
IkReal x616=(r01*x607);
IkReal x617=(x607*x608);
IkReal x618=((((-1.0)*x612*x616))+(((-1.0)*sj6*x610*x612))+(((-1.0)*r01*sj6*x611))+((r21*sj6*x607*x610))+((sj6*x611*x616))+((r21*x608*x616))+(((-1.0)*r01*x608*x612))+((r02*r21*x614))+((r00*r20*x608))+(((-1.0)*x609))+((x607*x609))+(((-1.0)*x613))+(((-1.0)*x613*x617))+((r01*r22*x614))+(((-1.0)*r02*x611*x615))+(((-1.0)*r22*x610*x615)));
j4eval[0]=x618;
j4eval[1]=IKsign(x618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x619=cj5*cj5;
IkReal x620=cj6*cj6;
IkReal x621=(cj6*r20);
IkReal x622=(cj2*sj1);
IkReal x623=(cj5*r21);
IkReal x624=(r22*sj5);
IkReal x625=(r01*r21);
IkReal x626=(cj6*r21);
IkReal x627=((1.0)*sj6);
IkReal x628=(r02*r22);
IkReal x629=((1.0)*cj5);
IkReal x630=((1.0)*r00*r20);
IkReal x631=(cj5*sj5*sj6);
IkReal x632=(cj1*sj2*sj6);
IkReal x633=((1.0)*cj1*sj2);
IkReal x634=(sj6*x619);
IkReal x635=(x619*x620);
CheckValue<IkReal> x636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x621*x627))+(((-1.0)*x630*x635))+((r00*r20*x620))+((r00*x626*x634))+((x625*x635))+((x619*x628))+(((-1.0)*x630))+(((-1.0)*cj6*r00*x624*x629))+(((-1.0)*x620*x625))+((cj5*r01*sj6*x624))+(((-1.0)*x619*x625))+(((-1.0)*x628))+(((-1.0)*r02*sj5*x621*x629))+(((-1.0)*r00*x626*x627))+((r02*sj5*sj6*x623))+((r01*x621*x634)))),-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal(((((-1.0)*x622*x623*x627))+(((-1.0)*cj1*sj2*x621*x629))+(((-1.0)*x624*x633))+((cj5*x621*x622))+((x623*x632))+((x622*x624)))),IkReal(((((-1.0)*cj1*r20*sj2*x627))+((r20*sj6*x622))+(((-1.0)*x626*x633))+((x622*x626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x636.value)))+(x637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x638=IKsin(j4);
IkReal x639=IKcos(j4);
IkReal x640=(cj1*sj2);
IkReal x641=((1.0)*r00);
IkReal x642=(cj5*r01);
IkReal x643=(sj1*sj2);
IkReal x644=(cj5*r11);
IkReal x645=((1.0)*cj2);
IkReal x646=((1.0)*cj5);
IkReal x647=(cj5*r21);
IkReal x648=(sj1*x645);
IkReal x649=(cj6*x638);
IkReal x650=(sj6*x639);
IkReal x651=(sj6*x638);
IkReal x652=(cj6*x639);
IkReal x653=((1.0)*sj5*x638);
IkReal x654=((1.0)*sj5*x639);
evalcond[0]=(((x647*x650))+(((-1.0)*r22*x654))+((r21*x649))+(((-1.0)*r20*x646*x652))+((r20*x651)));
evalcond[1]=(((x647*x651))+(((-1.0)*r20*x650))+(((-1.0)*r22*x653))+(((-1.0)*r20*x646*x649))+(((-1.0)*r21*x652)));
evalcond[2]=((((-1.0)*r10*x646*x652))+(((-1.0)*r12*x654))+((x644*x650))+(((-1.0)*x648))+x640+((r10*x651))+((r11*x649)));
evalcond[3]=((((-1.0)*r12*x653))+((x644*x651))+(((-1.0)*r10*x650))+(((-1.0)*r11*x652))+x643+((cj1*cj2))+(((-1.0)*r10*x646*x649)));
evalcond[4]=((((-1.0)*cj5*x641*x652))+(((-1.0)*x643))+(((-1.0)*cj1*x645))+(((-1.0)*r02*x654))+((x642*x650))+((r01*x649))+((r00*x651)));
evalcond[5]=((((-1.0)*x641*x650))+(((-1.0)*x648))+(((-1.0)*r02*x653))+x640+(((-1.0)*r01*x652))+((x642*x651))+(((-1.0)*cj5*x641*x649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x655=(cj2*sj1);
IkReal x656=(r22*sj5);
IkReal x657=((1.0)*cj5);
IkReal x658=(cj6*r20);
IkReal x659=(cj1*sj2);
IkReal x660=((1.0)*sj6);
IkReal x661=(r21*sj6);
IkReal x662=(cj6*r21);
CheckValue<IkReal> x663=IKPowWithIntegerCheck(IKsign((((cj6*r00*sj5))+(((-1.0)*r02*x657))+(((-1.0)*r01*sj5*x660)))),-1);
if(!x663.valid){
continue;
}
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal(((((-1.0)*x657*x658*x659))+((cj5*x655*x658))+((x655*x656))+(((-1.0)*x656*x659))+((cj5*x659*x661))+(((-1.0)*x655*x657*x661)))),IkReal(((((-1.0)*r20*x659*x660))+((r20*sj6*x655))+(((-1.0)*x659*x662))+((x655*x662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x663.value)))+(x664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x665=IKsin(j4);
IkReal x666=IKcos(j4);
IkReal x667=(cj1*sj2);
IkReal x668=((1.0)*r00);
IkReal x669=(cj5*r01);
IkReal x670=(sj1*sj2);
IkReal x671=(cj5*r11);
IkReal x672=((1.0)*cj2);
IkReal x673=((1.0)*cj5);
IkReal x674=(cj5*r21);
IkReal x675=(sj1*x672);
IkReal x676=(cj6*x665);
IkReal x677=(sj6*x666);
IkReal x678=(sj6*x665);
IkReal x679=(cj6*x666);
IkReal x680=((1.0)*sj5*x665);
IkReal x681=((1.0)*sj5*x666);
evalcond[0]=(((r21*x676))+((x674*x677))+(((-1.0)*r20*x673*x679))+((r20*x678))+(((-1.0)*r22*x681)));
evalcond[1]=((((-1.0)*r20*x677))+((x674*x678))+(((-1.0)*r20*x673*x676))+(((-1.0)*r21*x679))+(((-1.0)*r22*x680)));
evalcond[2]=((((-1.0)*r12*x681))+((r10*x678))+((x671*x677))+((r11*x676))+(((-1.0)*r10*x673*x679))+x667+(((-1.0)*x675)));
evalcond[3]=((((-1.0)*r12*x680))+((x671*x678))+(((-1.0)*r11*x679))+(((-1.0)*r10*x673*x676))+x670+((cj1*cj2))+(((-1.0)*r10*x677)));
evalcond[4]=(((r01*x676))+((r00*x678))+(((-1.0)*r02*x681))+(((-1.0)*cj5*x668*x679))+((x669*x677))+(((-1.0)*cj1*x672))+(((-1.0)*x670)));
evalcond[5]=((((-1.0)*r01*x679))+(((-1.0)*x668*x677))+(((-1.0)*r02*x680))+(((-1.0)*cj5*x668*x676))+((x669*x678))+x667+(((-1.0)*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x682=(sj1*sj2);
IkReal x683=(r22*sj5);
IkReal x684=(cj1*cj2);
IkReal x685=(r20*sj6);
IkReal x686=(r21*x682);
IkReal x687=((1.0)*cj5*sj6);
IkReal x688=(cj5*cj6*r20);
CheckValue<IkReal> x689 = IKatan2WithCheck(IkReal((((x682*x688))+((x682*x683))+((x683*x684))+(((-1.0)*x686*x687))+((x684*x688))+(((-1.0)*r21*x684*x687)))),IkReal((((cj6*x686))+((cj6*r21*x684))+((x682*x685))+((x684*x685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x689.valid){
continue;
}
CheckValue<IkReal> x690=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))),-1);
if(!x690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x689.value)+(((1.5707963267949)*(x690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x691=IKsin(j4);
IkReal x692=IKcos(j4);
IkReal x693=(cj1*sj2);
IkReal x694=((1.0)*r00);
IkReal x695=(cj5*r01);
IkReal x696=(sj1*sj2);
IkReal x697=(cj5*r11);
IkReal x698=((1.0)*cj2);
IkReal x699=((1.0)*cj5);
IkReal x700=(cj5*r21);
IkReal x701=(sj1*x698);
IkReal x702=(cj6*x691);
IkReal x703=(sj6*x692);
IkReal x704=(sj6*x691);
IkReal x705=(cj6*x692);
IkReal x706=((1.0)*sj5*x691);
IkReal x707=((1.0)*sj5*x692);
evalcond[0]=(((x700*x703))+((r20*x704))+(((-1.0)*r20*x699*x705))+((r21*x702))+(((-1.0)*r22*x707)));
evalcond[1]=((((-1.0)*r21*x705))+((x700*x704))+(((-1.0)*r20*x703))+(((-1.0)*r20*x699*x702))+(((-1.0)*r22*x706)));
evalcond[2]=((((-1.0)*r12*x707))+((x697*x703))+(((-1.0)*x701))+x693+(((-1.0)*r10*x699*x705))+((r10*x704))+((r11*x702)));
evalcond[3]=((((-1.0)*r12*x706))+(((-1.0)*r11*x705))+((x697*x704))+(((-1.0)*r10*x703))+x696+((cj1*cj2))+(((-1.0)*r10*x699*x702)));
evalcond[4]=((((-1.0)*r02*x707))+((r01*x702))+(((-1.0)*cj1*x698))+((r00*x704))+((x695*x703))+(((-1.0)*cj5*x694*x705))+(((-1.0)*x696)));
evalcond[5]=((((-1.0)*r02*x706))+(((-1.0)*x694*x703))+((x695*x704))+(((-1.0)*cj5*x694*x702))+(((-1.0)*r01*x705))+(((-1.0)*x701))+x693);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x708=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x708;
j4eval[1]=IKsign(x708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x709=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x709;
j4eval[1]=IKsign(x709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x710=cj5*cj5;
IkReal x711=cj6*cj6;
IkReal x712=(r00*r20);
IkReal x713=((1.0)*r21);
IkReal x714=(cj6*r20);
IkReal x715=(r01*sj6);
IkReal x716=(r02*r22);
IkReal x717=(cj6*r00);
IkReal x718=(r01*r21);
IkReal x719=(cj5*r02*sj5);
IkReal x720=((1.0)*x710);
IkReal x721=(cj5*r22*sj5);
IkReal x722=(x710*x711);
IkReal x723=(((x712*x722))+((x714*x715))+((x714*x719))+(((-1.0)*r01*x713*x722))+(((-1.0)*sj6*x710*x713*x717))+((x711*x718))+(((-1.0)*x711*x712))+((x717*x721))+((x710*x718))+((r21*sj6*x717))+(((-1.0)*x716*x720))+(((-1.0)*x715*x721))+x712+x716+(((-1.0)*sj6*x713*x719))+(((-1.0)*x714*x715*x720)));
j4eval[0]=x723;
j4eval[1]=IKsign(x723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x724=cj5*cj5;
IkReal x725=cj6*cj6;
IkReal x726=(r00*r20);
IkReal x727=((1.0)*r21);
IkReal x728=(cj5*cj6);
IkReal x729=(r22*sj5);
IkReal x730=((1.0)*sj6);
IkReal x731=(cj1*cj2);
IkReal x732=(sj1*sj2);
IkReal x733=(cj5*sj6);
IkReal x734=(r02*sj5);
IkReal x735=(r01*r21);
IkReal x736=(r02*r22);
IkReal x737=(r20*x731);
IkReal x738=(cj6*r01*r20);
IkReal x739=(cj6*r00*sj6);
IkReal x740=(x724*x725);
CheckValue<IkReal> x741=IKPowWithIntegerCheck(IKsign((((x726*x740))+(((-1.0)*x727*x733*x734))+(((-1.0)*x724*x736))+(((-1.0)*x724*x727*x739))+(((-1.0)*x724*x730*x738))+(((-1.0)*x725*x726))+((x724*x735))+x736+x726+((x725*x735))+((sj6*x738))+(((-1.0)*r01*x727*x740))+((r21*x739))+((r20*x728*x734))+(((-1.0)*cj5*r01*x729*x730))+((r00*x728*x729)))),-1);
if(!x741.valid){
continue;
}
CheckValue<IkReal> x742 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x730*x732))+(((-1.0)*x730*x737))+(((-1.0)*cj6*x727*x731))+(((-1.0)*cj6*x727*x732)))),IkReal((((x728*x737))+((x729*x732))+((x729*x731))+(((-1.0)*x727*x732*x733))+(((-1.0)*x727*x731*x733))+((r20*x728*x732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x741.value)))+(x742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x743=IKsin(j4);
IkReal x744=IKcos(j4);
IkReal x745=(sj1*sj2);
IkReal x746=(cj1*cj2);
IkReal x747=((1.0)*r00);
IkReal x748=(cj5*r01);
IkReal x749=(cj5*r11);
IkReal x750=((1.0)*cj5);
IkReal x751=(cj1*sj2);
IkReal x752=(cj2*sj1);
IkReal x753=(cj5*r21);
IkReal x754=(cj6*x743);
IkReal x755=(sj6*x744);
IkReal x756=(sj6*x743);
IkReal x757=(cj6*x744);
IkReal x758=(x746+x745);
IkReal x759=((1.0)*sj5*x743);
IkReal x760=((1.0)*sj5*x744);
evalcond[0]=(((r21*x754))+(((-1.0)*r20*x750*x757))+((r20*x756))+((x753*x755))+(((-1.0)*r22*x760)));
evalcond[1]=((((-1.0)*r20*x755))+(((-1.0)*r21*x757))+(((-1.0)*r20*x750*x754))+(((-1.0)*r22*x759))+((x753*x756)));
evalcond[2]=(((r01*x754))+((r00*x756))+x758+(((-1.0)*r02*x760))+((x748*x755))+(((-1.0)*cj5*x747*x757)));
evalcond[3]=((((-1.0)*r10*x750*x757))+((r10*x756))+(((-1.0)*x751))+(((-1.0)*r12*x760))+((r11*x754))+x752+((x749*x755)));
evalcond[4]=((((-1.0)*r11*x757))+(((-1.0)*r10*x750*x754))+(((-1.0)*r10*x755))+(((-1.0)*r12*x759))+x758+((x749*x756)));
evalcond[5]=((((-1.0)*r02*x759))+(((-1.0)*x747*x755))+(((-1.0)*x752))+x751+(((-1.0)*r01*x757))+((x748*x756))+(((-1.0)*cj5*x747*x754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x761=(cj5*sj6);
IkReal x762=((1.0)*cj6);
IkReal x763=(sj1*sj2);
IkReal x764=(cj5*r20);
IkReal x765=(cj1*cj2);
IkReal x766=(r21*x765);
IkReal x767=((1.0)*r20*sj6);
IkReal x768=((1.0)*r22*sj5);
CheckValue<IkReal> x769 = IKatan2WithCheck(IkReal(((((-1.0)*x763*x768))+(((-1.0)*x765*x768))+((x761*x766))+((r21*x761*x763))+(((-1.0)*x762*x764*x765))+(((-1.0)*x762*x763*x764)))),IkReal(((((-1.0)*x763*x767))+(((-1.0)*x762*x766))+(((-1.0)*x765*x767))+(((-1.0)*r21*x762*x763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x769.valid){
continue;
}
CheckValue<IkReal> x770=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x762))+((r11*sj5*sj6)))),-1);
if(!x770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x769.value)+(((1.5707963267949)*(x770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x771=IKsin(j4);
IkReal x772=IKcos(j4);
IkReal x773=(sj1*sj2);
IkReal x774=(cj1*cj2);
IkReal x775=((1.0)*r00);
IkReal x776=(cj5*r01);
IkReal x777=(cj5*r11);
IkReal x778=((1.0)*cj5);
IkReal x779=(cj1*sj2);
IkReal x780=(cj2*sj1);
IkReal x781=(cj5*r21);
IkReal x782=(cj6*x771);
IkReal x783=(sj6*x772);
IkReal x784=(sj6*x771);
IkReal x785=(cj6*x772);
IkReal x786=(x773+x774);
IkReal x787=((1.0)*sj5*x771);
IkReal x788=((1.0)*sj5*x772);
evalcond[0]=(((x781*x783))+((r20*x784))+(((-1.0)*r20*x778*x785))+((r21*x782))+(((-1.0)*r22*x788)));
evalcond[1]=(((x781*x784))+(((-1.0)*r21*x785))+(((-1.0)*r20*x783))+(((-1.0)*r20*x778*x782))+(((-1.0)*r22*x787)));
evalcond[2]=(((r00*x784))+((r01*x782))+x786+(((-1.0)*r02*x788))+((x776*x783))+(((-1.0)*cj5*x775*x785)));
evalcond[3]=((((-1.0)*r10*x778*x785))+((r10*x784))+(((-1.0)*r12*x788))+((r11*x782))+x780+(((-1.0)*x779))+((x777*x783)));
evalcond[4]=((((-1.0)*r10*x778*x782))+(((-1.0)*r12*x787))+(((-1.0)*r10*x783))+x786+((x777*x784))+(((-1.0)*r11*x785)));
evalcond[5]=((((-1.0)*r01*x785))+(((-1.0)*x775*x783))+x779+(((-1.0)*x780))+(((-1.0)*r02*x787))+((x776*x784))+(((-1.0)*cj5*x775*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x789=((1.0)*sj6);
IkReal x790=(cj1*sj2);
IkReal x791=(r22*sj5);
IkReal x792=(cj2*sj1);
IkReal x793=((1.0)*cj6);
IkReal x794=(cj5*r20);
IkReal x795=(r21*x790);
CheckValue<IkReal> x796 = IKatan2WithCheck(IkReal((((cj5*r21*sj6*x792))+((x790*x791))+(((-1.0)*cj5*x789*x795))+(((-1.0)*x791*x792))+(((-1.0)*x792*x793*x794))+((cj6*x790*x794)))),IkReal((((cj6*x795))+(((-1.0)*r21*x792*x793))+(((-1.0)*r20*x789*x792))+((r20*sj6*x790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x796.valid){
continue;
}
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x789))+(((-1.0)*cj5*r02)))),-1);
if(!x797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x796.value)+(((1.5707963267949)*(x797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x798=IKsin(j4);
IkReal x799=IKcos(j4);
IkReal x800=(sj1*sj2);
IkReal x801=(cj1*cj2);
IkReal x802=((1.0)*r00);
IkReal x803=(cj5*r01);
IkReal x804=(cj5*r11);
IkReal x805=((1.0)*cj5);
IkReal x806=(cj1*sj2);
IkReal x807=(cj2*sj1);
IkReal x808=(cj5*r21);
IkReal x809=(cj6*x798);
IkReal x810=(sj6*x799);
IkReal x811=(sj6*x798);
IkReal x812=(cj6*x799);
IkReal x813=(x801+x800);
IkReal x814=((1.0)*sj5*x798);
IkReal x815=((1.0)*sj5*x799);
evalcond[0]=(((r20*x811))+((r21*x809))+((x808*x810))+(((-1.0)*r20*x805*x812))+(((-1.0)*r22*x815)));
evalcond[1]=((((-1.0)*r20*x805*x809))+(((-1.0)*r20*x810))+((x808*x811))+(((-1.0)*r21*x812))+(((-1.0)*r22*x814)));
evalcond[2]=(((r00*x811))+((r01*x809))+x813+(((-1.0)*r02*x815))+(((-1.0)*cj5*x802*x812))+((x803*x810)));
evalcond[3]=((((-1.0)*x806))+((r10*x811))+(((-1.0)*r12*x815))+((r11*x809))+(((-1.0)*r10*x805*x812))+((x804*x810))+x807);
evalcond[4]=((((-1.0)*r10*x805*x809))+(((-1.0)*r11*x812))+(((-1.0)*r12*x814))+(((-1.0)*r10*x810))+((x804*x811))+x813);
evalcond[5]=((((-1.0)*x807))+(((-1.0)*x802*x810))+(((-1.0)*cj5*x802*x809))+(((-1.0)*r01*x812))+x806+(((-1.0)*r02*x814))+((x803*x811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x816=cj5*cj5;
IkReal x817=cj6*cj6;
IkReal x818=(r10*r20);
IkReal x819=(r12*sj5);
IkReal x820=(cj5*sj6);
IkReal x821=(cj1*cj2);
IkReal x822=(r22*sj5);
IkReal x823=(sj1*sj2);
IkReal x824=((1.0)*r21);
IkReal x825=(r20*sj6);
IkReal x826=(r10*sj6);
IkReal x827=(r12*r22);
IkReal x828=(cj6*r21);
IkReal x829=(r11*x816);
IkReal x830=(cj5*cj6*r20);
IkReal x831=((1.0)*r11*sj3);
IkReal x832=(cj5*cj6*r10);
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*x825*x829))+((r21*x829))+(((-1.0)*x817*x818))+((x819*x830))+(((-1.0)*cj6*x816*x824*x826))+(((-1.0)*x816*x827))+((r11*r21*x817))+((x816*x817*x818))+(((-1.0)*x817*x824*x829))+((x822*x832))+x818+x827+(((-1.0)*x819*x820*x824))+(((-1.0)*r11*x820*x822))+((cj6*r11*x825))+((x826*x828)))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((((-1.0)*x820*x821*x824))+((x821*x822))+(((-1.0)*x820*x823*x824))+(((-1.0)*sj3*x826))+((x821*x830))+((x822*x823))+((x823*x830))+(((-1.0)*cj6*x831)))),IkReal(((((-1.0)*x820*x831))+((x821*x825))+((x821*x828))+((sj3*x819))+((x823*x828))+((x823*x825))+((sj3*x832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x833.value)))+(x834.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x835=IKsin(j4);
IkReal x836=IKcos(j4);
IkReal x837=((1.0)*r00);
IkReal x838=(cj5*r01);
IkReal x839=(sj1*sj2);
IkReal x840=(cj5*r11);
IkReal x841=((1.0)*cj5);
IkReal x842=(cj5*r21);
IkReal x843=(cj1*sj2);
IkReal x844=(cj6*x835);
IkReal x845=(sj6*x836);
IkReal x846=((1.0)*cj2*cj3);
IkReal x847=(sj6*x835);
IkReal x848=((1.0)*x836);
IkReal x849=(cj6*x836);
IkReal x850=((1.0)*sj5*x835);
evalcond[0]=(sj3+(((-1.0)*r22*sj5*x848))+((r20*x847))+((r21*x844))+((x842*x845))+(((-1.0)*r20*x841*x849)));
evalcond[1]=((((-1.0)*r22*x850))+(((-1.0)*r20*x845))+(((-1.0)*cj6*r21*x848))+((x842*x847))+(((-1.0)*r20*x841*x844)));
evalcond[2]=((((-1.0)*cj6*r11*x848))+(((-1.0)*r10*x841*x844))+(((-1.0)*r12*x850))+((x840*x847))+(((-1.0)*r10*x845))+((cj1*cj2))+x839);
evalcond[3]=(((x838*x847))+(((-1.0)*cj2*sj1))+(((-1.0)*x837*x845))+(((-1.0)*cj5*x837*x844))+(((-1.0)*r02*x850))+(((-1.0)*cj6*r01*x848))+x843);
evalcond[4]=((((-1.0)*r10*x841*x849))+((x840*x845))+(((-1.0)*r12*sj5*x848))+((r10*x847))+((cj3*x843))+((r11*x844))+(((-1.0)*sj1*x846)));
evalcond[5]=(((x838*x845))+(((-1.0)*r02*sj5*x848))+(((-1.0)*cj5*x837*x849))+((r01*x844))+((r00*x847))+(((-1.0)*cj3*x839))+(((-1.0)*cj1*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x851=cj6*cj6;
IkReal x852=r20*r20;
IkReal x853=cj5*cj5;
IkReal x854=r21*r21;
IkReal x855=r22*r22;
IkReal x856=(r22*sj5);
IkReal x857=((1.0)*sj3);
IkReal x858=(r20*sj6);
IkReal x859=(cj6*r21);
IkReal x860=((2.0)*cj5);
IkReal x861=(r21*sj6);
IkReal x862=(cj6*r20);
IkReal x863=((1.0)*x853);
IkReal x864=(x851*x854);
IkReal x865=(x851*x852);
CheckValue<IkReal> x866=IKPowWithIntegerCheck(IKsign((((x856*x860*x862))+(((-1.0)*x865))+(((-2.0)*x853*x858*x859))+(((2.0)*x858*x859))+((x853*x865))+(((-1.0)*x856*x860*x861))+x852+x855+x864+((x853*x854))+(((-1.0)*x863*x864))+(((-1.0)*x855*x863)))),-1);
if(!x866.valid){
continue;
}
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((((-1.0)*x857*x858))+(((-1.0)*x857*x859)))),IkReal((((cj5*sj3*x862))+((sj3*x856))+(((-1.0)*cj5*x857*x861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x866.value)))+(x867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x868=IKsin(j4);
IkReal x869=IKcos(j4);
IkReal x870=((1.0)*r00);
IkReal x871=(cj5*r01);
IkReal x872=(sj1*sj2);
IkReal x873=(cj5*r11);
IkReal x874=((1.0)*cj5);
IkReal x875=(cj5*r21);
IkReal x876=(cj1*sj2);
IkReal x877=(cj6*x868);
IkReal x878=(sj6*x869);
IkReal x879=((1.0)*cj2*cj3);
IkReal x880=(sj6*x868);
IkReal x881=((1.0)*x869);
IkReal x882=(cj6*x869);
IkReal x883=((1.0)*sj5*x868);
evalcond[0]=(sj3+((r21*x877))+(((-1.0)*r20*x874*x882))+((r20*x880))+(((-1.0)*r22*sj5*x881))+((x875*x878)));
evalcond[1]=((((-1.0)*r20*x878))+(((-1.0)*cj6*r21*x881))+((x875*x880))+(((-1.0)*r22*x883))+(((-1.0)*r20*x874*x877)));
evalcond[2]=((((-1.0)*r10*x878))+(((-1.0)*r10*x874*x877))+(((-1.0)*r12*x883))+((cj1*cj2))+x872+(((-1.0)*cj6*r11*x881))+((x873*x880)));
evalcond[3]=((((-1.0)*cj5*x870*x877))+(((-1.0)*cj2*sj1))+(((-1.0)*x870*x878))+((x871*x880))+x876+(((-1.0)*cj6*r01*x881))+(((-1.0)*r02*x883)));
evalcond[4]=((((-1.0)*r12*sj5*x881))+((r11*x877))+((cj3*x876))+((r10*x880))+(((-1.0)*sj1*x879))+((x873*x878))+(((-1.0)*r10*x874*x882)));
evalcond[5]=(((x871*x878))+((r01*x877))+(((-1.0)*cj3*x872))+((r00*x880))+(((-1.0)*r02*sj5*x881))+(((-1.0)*cj1*x879))+(((-1.0)*cj5*x870*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x884=(cj3*r21);
IkReal x885=((1.0)*sj5);
IkReal x886=(cj1*sj2);
IkReal x887=(cj3*r22);
IkReal x888=(cj3*r20);
IkReal x889=(cj2*sj1);
IkReal x890=((1.0)*cj6);
IkReal x891=(sj3*sj6);
IkReal x892=(sj6*x889);
CheckValue<IkReal> x893=IKPowWithIntegerCheck(IKsign((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x885))+((cj5*r02)))),-1);
if(!x893.valid){
continue;
}
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal((((cj5*x884*x892))+(((-1.0)*cj5*x888*x889*x890))+((cj5*r11*x891))+(((-1.0)*r12*sj3*x885))+((sj5*x886*x887))+(((-1.0)*x885*x887*x889))+(((-1.0)*cj5*sj6*x884*x886))+((cj5*cj6*x886*x888))+(((-1.0)*cj5*r10*sj3*x890)))),IkReal(((((-1.0)*r11*sj3*x890))+((sj6*x886*x888))+(((-1.0)*r10*x891))+(((-1.0)*x884*x889*x890))+(((-1.0)*x888*x892))+((cj6*x884*x886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x893.value)))+(x894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x895=IKsin(j4);
IkReal x896=IKcos(j4);
IkReal x897=((1.0)*r00);
IkReal x898=(cj5*r01);
IkReal x899=(sj1*sj2);
IkReal x900=(cj5*r11);
IkReal x901=((1.0)*cj5);
IkReal x902=(cj5*r21);
IkReal x903=(cj1*sj2);
IkReal x904=(cj6*x895);
IkReal x905=(sj6*x896);
IkReal x906=((1.0)*cj2*cj3);
IkReal x907=(sj6*x895);
IkReal x908=((1.0)*x896);
IkReal x909=(cj6*x896);
IkReal x910=((1.0)*sj5*x895);
evalcond[0]=(((r21*x904))+sj3+((r20*x907))+((x902*x905))+(((-1.0)*r22*sj5*x908))+(((-1.0)*r20*x901*x909)));
evalcond[1]=((((-1.0)*r20*x905))+(((-1.0)*r22*x910))+((x902*x907))+(((-1.0)*r20*x901*x904))+(((-1.0)*cj6*r21*x908)));
evalcond[2]=((((-1.0)*r10*x901*x904))+((x900*x907))+(((-1.0)*r10*x905))+(((-1.0)*r12*x910))+(((-1.0)*cj6*r11*x908))+((cj1*cj2))+x899);
evalcond[3]=((((-1.0)*cj6*r01*x908))+(((-1.0)*x897*x905))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x910))+(((-1.0)*cj5*x897*x904))+((x898*x907))+x903);
evalcond[4]=((((-1.0)*r10*x901*x909))+(((-1.0)*r12*sj5*x908))+((cj3*x903))+((r11*x904))+(((-1.0)*sj1*x906))+((x900*x905))+((r10*x907)));
evalcond[5]=((((-1.0)*cj3*x899))+((r00*x907))+((r01*x904))+(((-1.0)*r02*sj5*x908))+(((-1.0)*cj5*x897*x909))+((x898*x905))+(((-1.0)*cj1*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x911=cj6*cj6;
IkReal x912=r20*r20;
IkReal x913=cj5*cj5;
IkReal x914=r21*r21;
IkReal x915=r22*r22;
IkReal x916=(r22*sj5);
IkReal x917=((1.0)*sj3);
IkReal x918=(r20*sj6);
IkReal x919=(cj6*r21);
IkReal x920=((2.0)*cj5);
IkReal x921=(r21*sj6);
IkReal x922=(cj6*r20);
IkReal x923=((1.0)*x913);
IkReal x924=(x911*x914);
IkReal x925=(x911*x912);
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(((((-1.0)*x917*x919))+(((-1.0)*x917*x918)))),IkReal(((((-1.0)*cj5*x917*x921))+((sj3*x916))+((cj5*sj3*x922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(((((2.0)*x918*x919))+(((-1.0)*x916*x920*x921))+(((-2.0)*x913*x918*x919))+(((-1.0)*x925))+((x916*x920*x922))+(((-1.0)*x915*x923))+((x913*x914))+x924+x912+x915+(((-1.0)*x923*x924))+((x913*x925)))),-1);
if(!x927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x926.value)+(((1.5707963267949)*(x927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x928=IKsin(j4);
IkReal x929=IKcos(j4);
IkReal x930=((1.0)*cj6);
IkReal x931=(r20*x928);
IkReal x932=((1.0)*r22*sj5);
IkReal x933=(r20*x929);
IkReal x934=(cj5*r21*sj6);
evalcond[0]=(sj3+(((-1.0)*cj5*x930*x933))+((cj6*r21*x928))+(((-1.0)*x929*x932))+((sj6*x931))+((x929*x934)));
evalcond[1]=((((-1.0)*sj6*x933))+(((-1.0)*x928*x932))+((x928*x934))+(((-1.0)*cj5*x930*x931))+(((-1.0)*r21*x929*x930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x935=(cj3*sj3);
j2eval[0]=x935;
j2eval[1]=IKsign(x935);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x936=(cj5*sj6);
IkReal x937=(cj1*cj4);
IkReal x938=(r12*sj5);
IkReal x939=((1.0)*r10);
IkReal x940=(cj5*cj6);
IkReal x941=(cj4*sj1);
IkReal x942=(cj1*sj4);
IkReal x943=(cj6*r11);
IkReal x944=((1.0)*r11);
IkReal x945=(sj1*sj4);
IkReal x946=(r10*sj6);
IkReal x947=(r11*x941);
if( IKabs((((r10*x937*x940))+(((-1.0)*x936*x937*x944))+((x937*x938))+(((-1.0)*x942*x943))+(((-1.0)*x936*x944*x945))+((x938*x945))+(((-1.0)*sj6*x939*x942))+((x941*x943))+((x941*x946))+((r10*x940*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x936*x942*x944))+(((-1.0)*x939*x940*x941))+((x945*x946))+((x936*x947))+((x938*x942))+((x937*x943))+((x937*x946))+(((-1.0)*x938*x941))+((x943*x945))+((r10*x940*x942)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x937*x940))+(((-1.0)*x936*x937*x944))+((x937*x938))+(((-1.0)*x942*x943))+(((-1.0)*x936*x944*x945))+((x938*x945))+(((-1.0)*sj6*x939*x942))+((x941*x943))+((x941*x946))+((r10*x940*x945))))+IKsqr(((((-1.0)*x936*x942*x944))+(((-1.0)*x939*x940*x941))+((x945*x946))+((x936*x947))+((x938*x942))+((x937*x943))+((x937*x946))+(((-1.0)*x938*x941))+((x943*x945))+((r10*x940*x942))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*x937*x940))+(((-1.0)*x936*x937*x944))+((x937*x938))+(((-1.0)*x942*x943))+(((-1.0)*x936*x944*x945))+((x938*x945))+(((-1.0)*sj6*x939*x942))+((x941*x943))+((x941*x946))+((r10*x940*x945))), ((((-1.0)*x936*x942*x944))+(((-1.0)*x939*x940*x941))+((x945*x946))+((x936*x947))+((x938*x942))+((x937*x943))+((x937*x946))+(((-1.0)*x938*x941))+((x943*x945))+((r10*x940*x942))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x948=IKcos(j2);
IkReal x949=IKsin(j2);
IkReal x950=((0.029)*cj6);
IkReal x951=(r10*sj6);
IkReal x952=(sj4*sj6);
IkReal x953=(cj5*r01);
IkReal x954=(cj4*r11);
IkReal x955=((1.0)*cj6);
IkReal x956=(cj6*r01);
IkReal x957=(cj4*sj6);
IkReal x958=((1.0)*cj4);
IkReal x959=((0.029)*sj6);
IkReal x960=(cj6*r11);
IkReal x961=(cj5*sj4);
IkReal x962=(cj1*x949);
IkReal x963=(cj1*x948);
IkReal x964=(sj1*x948);
IkReal x965=((1.0)*sj4*sj5);
IkReal x966=(sj1*x949);
IkReal x967=((1.0)*x964);
IkReal x968=(cj4*cj5*x955);
evalcond[0]=((((-1.0)*r10*x968))+(((-1.0)*r12*sj5*x958))+((sj4*x960))+((sj4*x951))+((cj5*sj6*x954))+x962+(((-1.0)*x967)));
evalcond[1]=(((cj5*r11*x952))+(((-1.0)*r12*x965))+(((-1.0)*x951*x958))+(((-1.0)*x954*x955))+(((-1.0)*r10*x955*x961))+x963+x966);
evalcond[2]=((((-1.0)*r00*x968))+(((-1.0)*r02*sj5*x958))+(((-1.0)*x966))+(((-1.0)*x963))+((sj4*x956))+((r00*x952))+((x953*x957)));
evalcond[3]=(((x952*x953))+(((-1.0)*cj4*r01*x955))+(((-1.0)*r00*x955*x961))+(((-1.0)*r00*x957))+x962+(((-1.0)*x967))+(((-1.0)*r02*x965)));
evalcond[4]=((((-0.3125)*sj1))+(((-1.0)*r01*x959))+(((-1.0)*px))+((r00*x950))+(((0.124915)*x956))+(((-0.0675)*x963))+(((-0.0675)*x966))+(((0.124915)*r00*sj6))+(((0.38609)*x962))+(((-0.38609)*x964)));
evalcond[5]=((((0.3125)*cj1))+(((-1.0)*py))+(((0.0675)*x962))+(((-1.0)*r11*x959))+(((0.124915)*x951))+(((-0.0675)*x964))+(((0.38609)*x963))+(((0.38609)*x966))+(((0.124915)*x960))+((r10*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x969=(cj5*r12);
IkReal x970=((1.0)*sj1);
IkReal x971=(cj5*r02);
IkReal x972=((1.0)*cj1);
IkReal x973=(cj6*sj5);
IkReal x974=(r01*sj5*sj6);
IkReal x975=(sj1*x973);
IkReal x976=(r11*sj5*sj6);
if( IKabs(((((-1.0)*r10*x972*x973))+((cj1*x976))+((cj1*x969))+((r00*x975))+(((-1.0)*x970*x974))+(((-1.0)*x970*x971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x969*x970))+((cj1*r00*x973))+(((-1.0)*x971*x972))+(((-1.0)*x970*x976))+(((-1.0)*x972*x974))+((r10*x975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x972*x973))+((cj1*x976))+((cj1*x969))+((r00*x975))+(((-1.0)*x970*x974))+(((-1.0)*x970*x971))))+IKsqr(((((-1.0)*x969*x970))+((cj1*r00*x973))+(((-1.0)*x971*x972))+(((-1.0)*x970*x976))+(((-1.0)*x972*x974))+((r10*x975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x972*x973))+((cj1*x976))+((cj1*x969))+((r00*x975))+(((-1.0)*x970*x974))+(((-1.0)*x970*x971))), ((((-1.0)*x969*x970))+((cj1*r00*x973))+(((-1.0)*x971*x972))+(((-1.0)*x970*x976))+(((-1.0)*x972*x974))+((r10*x975))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x977=IKsin(j2);
IkReal x978=IKcos(j2);
IkReal x979=((0.029)*cj6);
IkReal x980=(r10*sj6);
IkReal x981=((1.0)*sj5);
IkReal x982=(r11*sj6);
IkReal x983=((1.0)*sj1);
IkReal x984=((1.0)*cj5);
IkReal x985=((1.0)*cj4);
IkReal x986=(cj6*r11);
IkReal x987=((0.38609)*sj1);
IkReal x988=(cj6*r01);
IkReal x989=(cj6*sj5);
IkReal x990=(r01*sj6);
IkReal x991=(cj6*sj4);
IkReal x992=(r00*sj6);
IkReal x993=(cj1*x977);
IkReal x994=(cj1*x978);
IkReal x995=((0.06)*x977);
IkReal x996=(cj5*sj4*sj6);
IkReal x997=(x978*x983);
evalcond[0]=((((-1.0)*x997))+((r10*x989))+(((-1.0)*x981*x982))+(((-1.0)*r12*x984))+x993);
evalcond[1]=((((-1.0)*x994))+((r00*x989))+(((-1.0)*x977*x983))+(((-1.0)*r02*x984))+(((-1.0)*x981*x990)));
evalcond[2]=(((cj5*sj4*x982))+(((-1.0)*r10*x984*x991))+((sj1*x977))+(((-1.0)*x980*x985))+(((-1.0)*r12*sj4*x981))+x994+(((-1.0)*x985*x986)));
evalcond[3]=(((cj5*sj4*x990))+(((-1.0)*r02*sj4*x981))+(((-1.0)*x985*x992))+(((-1.0)*r00*x984*x991))+(((-1.0)*x997))+x993+(((-1.0)*x985*x988)));
evalcond[4]=((((0.124915)*x988))+(((-0.3125)*sj1))+(((-1.0)*sj1*x995))+((r00*x979))+(((-1.0)*x978*x987))+(((-1.0)*px))+(((-0.06)*x994))+(((0.124915)*x992))+(((0.38609)*x993))+(((-0.029)*x990)));
evalcond[5]=((((0.124915)*x986))+(((0.124915)*x980))+(((-0.029)*x982))+(((0.3125)*cj1))+(((-0.06)*sj1*x978))+((x977*x987))+(((-1.0)*py))+(((0.38609)*x994))+((r10*x979))+(((0.06)*x993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x998=(cj4*sj5);
IkReal x999=(cj1*r10);
IkReal x1000=((1.0)*cj6);
IkReal x1001=(cj4*cj5);
IkReal x1002=(sj4*sj6);
IkReal x1003=(sj1*sj4);
IkReal x1004=(cj6*r00);
IkReal x1005=(cj1*r01);
IkReal x1006=(r10*sj1);
IkReal x1007=(cj1*r11);
IkReal x1008=((1.0)*sj1*sj6);
IkReal x1009=((1.0)*r00*x1002);
if( IKabs((((sj1*x1001*x1004))+(((-1.0)*r01*x1000*x1003))+((sj6*x1001*x1007))+((cj6*sj4*x1007))+((r02*sj1*x998))+(((-1.0)*cj1*r12*x998))+(((-1.0)*r01*x1001*x1008))+((x1002*x999))+(((-1.0)*sj1*x1009))+(((-1.0)*x1000*x1001*x999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1001*x1004))+(((-1.0)*x1002*x1006))+((cj6*x1001*x1006))+(((-1.0)*r11*x1001*x1008))+(((-1.0)*sj4*x1000*x1005))+((r12*sj1*x998))+((cj1*r02*x998))+(((-1.0)*cj1*x1009))+(((-1.0)*sj6*x1001*x1005))+(((-1.0)*r11*x1000*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1001*x1004))+(((-1.0)*r01*x1000*x1003))+((sj6*x1001*x1007))+((cj6*sj4*x1007))+((r02*sj1*x998))+(((-1.0)*cj1*r12*x998))+(((-1.0)*r01*x1001*x1008))+((x1002*x999))+(((-1.0)*sj1*x1009))+(((-1.0)*x1000*x1001*x999))))+IKsqr((((cj1*x1001*x1004))+(((-1.0)*x1002*x1006))+((cj6*x1001*x1006))+(((-1.0)*r11*x1001*x1008))+(((-1.0)*sj4*x1000*x1005))+((r12*sj1*x998))+((cj1*r02*x998))+(((-1.0)*cj1*x1009))+(((-1.0)*sj6*x1001*x1005))+(((-1.0)*r11*x1000*x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1001*x1004))+(((-1.0)*r01*x1000*x1003))+((sj6*x1001*x1007))+((cj6*sj4*x1007))+((r02*sj1*x998))+(((-1.0)*cj1*r12*x998))+(((-1.0)*r01*x1001*x1008))+((x1002*x999))+(((-1.0)*sj1*x1009))+(((-1.0)*x1000*x1001*x999))), (((cj1*x1001*x1004))+(((-1.0)*x1002*x1006))+((cj6*x1001*x1006))+(((-1.0)*r11*x1001*x1008))+(((-1.0)*sj4*x1000*x1005))+((r12*sj1*x998))+((cj1*r02*x998))+(((-1.0)*cj1*x1009))+(((-1.0)*sj6*x1001*x1005))+(((-1.0)*r11*x1000*x1003))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1010=IKcos(j2);
IkReal x1011=IKsin(j2);
IkReal x1012=((0.029)*cj6);
IkReal x1013=(r10*sj6);
IkReal x1014=(sj4*sj6);
IkReal x1015=(cj5*r01);
IkReal x1016=(cj4*r11);
IkReal x1017=((1.0)*cj6);
IkReal x1018=(cj6*r01);
IkReal x1019=(cj4*sj6);
IkReal x1020=((1.0)*cj4);
IkReal x1021=((0.029)*sj6);
IkReal x1022=(cj6*r11);
IkReal x1023=(cj5*sj4);
IkReal x1024=(cj1*x1010);
IkReal x1025=(sj1*x1011);
IkReal x1026=(cj1*x1011);
IkReal x1027=(sj1*x1010);
IkReal x1028=((1.0)*sj4*sj5);
IkReal x1029=(cj4*cj5*x1017);
IkReal x1030=(x1025+x1024);
evalcond[0]=(x1030+((sj4*x1018))+(((-1.0)*r02*sj5*x1020))+(((-1.0)*r00*x1029))+((x1015*x1019))+((r00*x1014)));
evalcond[1]=(x1027+(((-1.0)*x1026))+((sj4*x1013))+((sj4*x1022))+((cj5*sj6*x1016))+(((-1.0)*r10*x1029))+(((-1.0)*r12*sj5*x1020)));
evalcond[2]=((((-1.0)*r12*x1028))+x1030+(((-1.0)*r10*x1017*x1023))+((cj5*r11*x1014))+(((-1.0)*x1016*x1017))+(((-1.0)*x1013*x1020)));
evalcond[3]=(((x1014*x1015))+x1026+(((-1.0)*r00*x1019))+(((-1.0)*x1027))+(((-1.0)*r00*x1017*x1023))+(((-1.0)*r02*x1028))+(((-1.0)*cj4*r01*x1017)));
evalcond[4]=((((0.38609)*x1026))+(((-0.3125)*sj1))+(((-0.38609)*x1027))+(((-1.0)*px))+(((-1.0)*r01*x1021))+(((0.124915)*x1018))+(((-0.0675)*x1024))+(((-0.0675)*x1025))+((r00*x1012))+(((0.124915)*r00*sj6)));
evalcond[5]=((((0.124915)*x1022))+(((0.38609)*x1024))+(((0.38609)*x1025))+(((-1.0)*r11*x1021))+(((0.3125)*cj1))+(((0.0675)*x1026))+(((-1.0)*py))+(((0.124915)*x1013))+(((-0.0675)*x1027))+((r10*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1031=(cj1*sj5);
IkReal x1032=(r01*sj6);
IkReal x1033=(cj6*r10);
IkReal x1034=(sj1*sj5);
IkReal x1035=(cj5*sj1);
IkReal x1036=(r11*sj6);
IkReal x1037=(cj1*cj5);
IkReal x1038=((1.0)*cj6*r00);
if( IKabs((((x1031*x1033))+((r02*x1035))+(((-1.0)*x1034*x1038))+(((-1.0)*r12*x1037))+((x1032*x1034))+(((-1.0)*x1031*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1031*x1032))+((r02*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1031*x1038))+((x1034*x1036))+((r12*x1035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1031*x1033))+((r02*x1035))+(((-1.0)*x1034*x1038))+(((-1.0)*r12*x1037))+((x1032*x1034))+(((-1.0)*x1031*x1036))))+IKsqr((((x1031*x1032))+((r02*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1031*x1038))+((x1034*x1036))+((r12*x1035))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1031*x1033))+((r02*x1035))+(((-1.0)*x1034*x1038))+(((-1.0)*r12*x1037))+((x1032*x1034))+(((-1.0)*x1031*x1036))), (((x1031*x1032))+((r02*x1037))+(((-1.0)*x1033*x1034))+(((-1.0)*x1031*x1038))+((x1034*x1036))+((r12*x1035))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1039=IKcos(j2);
IkReal x1040=IKsin(j2);
IkReal x1041=((0.029)*cj6);
IkReal x1042=(r10*sj6);
IkReal x1043=((1.0)*sj5);
IkReal x1044=(r11*sj6);
IkReal x1045=((1.0)*cj5);
IkReal x1046=((1.0)*cj4);
IkReal x1047=(cj6*r11);
IkReal x1048=(cj6*r01);
IkReal x1049=(cj6*sj5);
IkReal x1050=(r01*sj6);
IkReal x1051=(r00*sj6);
IkReal x1052=(cj6*sj4);
IkReal x1053=(cj1*x1039);
IkReal x1054=(sj1*x1040);
IkReal x1055=(cj1*x1040);
IkReal x1056=(cj5*sj4*sj6);
IkReal x1057=(sj1*x1039);
IkReal x1058=(x1053+x1054);
evalcond[0]=((((-1.0)*r02*x1045))+x1058+(((-1.0)*x1043*x1050))+((r00*x1049)));
evalcond[1]=(x1057+(((-1.0)*x1043*x1044))+(((-1.0)*r12*x1045))+((r10*x1049))+(((-1.0)*x1055)));
evalcond[2]=((((-1.0)*x1046*x1047))+x1058+(((-1.0)*x1042*x1046))+(((-1.0)*r10*x1045*x1052))+(((-1.0)*r12*sj4*x1043))+((cj5*sj4*x1044)));
evalcond[3]=((((-1.0)*x1046*x1048))+(((-1.0)*x1046*x1051))+x1055+(((-1.0)*r02*sj4*x1043))+(((-1.0)*r00*x1045*x1052))+(((-1.0)*x1057))+((cj5*sj4*x1050)));
evalcond[4]=((((-0.3125)*sj1))+(((-1.0)*px))+(((0.124915)*x1048))+(((0.38609)*x1055))+((r00*x1041))+(((0.124915)*x1051))+(((-0.029)*x1050))+(((-0.38609)*x1057))+(((-0.075)*x1053))+(((-0.075)*x1054)));
evalcond[5]=((((0.3125)*cj1))+(((-1.0)*py))+(((0.075)*x1055))+(((0.124915)*x1042))+(((0.124915)*x1047))+(((0.38609)*x1053))+(((0.38609)*x1054))+(((-0.029)*x1044))+((r10*x1041))+(((-0.075)*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1059=(r01*sj6);
IkReal x1060=(r11*sj6);
IkReal x1061=(cj6*r01);
IkReal x1062=(cj1*cj5);
IkReal x1063=(cj3*r12);
IkReal x1064=(r00*sj6);
IkReal x1065=(cj4*sj3);
IkReal x1066=(cj6*r10);
IkReal x1067=((1.0)*sj5);
IkReal x1068=(cj1*cj3);
IkReal x1069=((1.0)*cj6*r00);
IkReal x1070=(cj3*sj1*sj5);
IkReal x1071=(cj1*sj3*sj4);
IkReal x1072=(sj1*sj3*sj4);
IkReal x1073=(cj5*sj1*x1065);
CheckValue<IkReal> x1074=IKPowWithIntegerCheck(IKsign((cj3*sj3)),-1);
if(!x1074.valid){
continue;
}
CheckValue<IkReal> x1075 = IKatan2WithCheck(IkReal((((x1061*x1072))+((x1062*x1063))+((sj5*x1060*x1068))+(((-1.0)*x1066*x1067*x1068))+(((-1.0)*x1069*x1073))+(((-1.0)*r02*sj1*x1065*x1067))+((x1059*x1073))+((x1064*x1072)))),IkReal((((x1061*x1071))+(((-1.0)*cj5*sj1*x1063))+(((-1.0)*cj1*r02*x1065*x1067))+((x1066*x1070))+(((-1.0)*x1062*x1065*x1069))+((x1059*x1062*x1065))+(((-1.0)*cj3*sj1*x1060*x1067))+((x1064*x1071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1075.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1074.value)))+(x1075.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1076=IKcos(j2);
IkReal x1077=IKsin(j2);
IkReal x1078=(cj4*sj6);
IkReal x1079=((1.0)*r00);
IkReal x1080=((0.029)*cj6);
IkReal x1081=((1.0)*cj3);
IkReal x1082=((0.0075)*sj3);
IkReal x1083=(r10*sj6);
IkReal x1084=(r11*sj6);
IkReal x1085=(cj5*sj4);
IkReal x1086=((1.0)*sj5);
IkReal x1087=((1.0)*cj5);
IkReal x1088=(cj4*cj6);
IkReal x1089=(r00*sj6);
IkReal x1090=(r01*sj6);
IkReal x1091=(cj6*r01);
IkReal x1092=((1.0)*sj3);
IkReal x1093=(cj6*sj5);
IkReal x1094=((1.0)*r10);
IkReal x1095=(cj6*r11);
IkReal x1096=(cj1*x1076);
IkReal x1097=(sj1*x1076);
IkReal x1098=(sj1*x1077);
IkReal x1099=(cj1*x1077);
evalcond[0]=(((r10*x1093))+(((-1.0)*x1092*x1097))+(((-1.0)*x1084*x1086))+((sj3*x1099))+(((-1.0)*r12*x1087)));
evalcond[1]=((((-1.0)*x1086*x1090))+((r00*x1093))+(((-1.0)*r02*x1087))+(((-1.0)*x1092*x1098))+(((-1.0)*x1092*x1096)));
evalcond[2]=((((-1.0)*r11*x1088))+x1096+x1098+(((-1.0)*r12*sj4*x1086))+(((-1.0)*cj6*x1085*x1094))+((x1084*x1085))+(((-1.0)*x1078*x1094)));
evalcond[3]=((((-1.0)*r01*x1088))+x1099+(((-1.0)*x1078*x1079))+((x1085*x1090))+(((-1.0)*cj6*x1079*x1085))+(((-1.0)*x1097))+(((-1.0)*r02*sj4*x1086)));
evalcond[4]=((((-1.0)*r10*x1087*x1088))+(((-1.0)*x1081*x1097))+((cj5*r11*x1078))+((sj4*x1095))+((sj4*x1083))+(((-1.0)*cj4*r12*x1086))+((cj3*x1099)));
evalcond[5]=((((-1.0)*cj4*r02*x1086))+(((-1.0)*x1081*x1096))+(((-1.0)*x1081*x1098))+(((-1.0)*cj5*x1079*x1088))+((sj4*x1091))+((cj5*r01*x1078))+((sj4*x1089)));
evalcond[6]=((((-0.3125)*sj1))+((r00*x1080))+(((0.38609)*x1099))+(((-0.029)*x1090))+(((0.124915)*x1089))+(((-1.0)*px))+((x1082*x1096))+((x1082*x1098))+(((-0.0675)*x1098))+(((-0.0675)*x1096))+(((-0.38609)*x1097))+(((0.124915)*x1091)));
evalcond[7]=((((0.0675)*x1099))+(((0.3125)*cj1))+(((0.38609)*x1098))+(((0.38609)*x1096))+((r10*x1080))+(((0.124915)*x1083))+(((-0.029)*x1084))+(((-1.0)*py))+((x1082*x1097))+(((-0.0675)*x1097))+(((-1.0)*x1082*x1099))+(((0.124915)*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1100=(cj5*r12);
IkReal x1101=((1.0)*sj1);
IkReal x1102=(cj5*r02);
IkReal x1103=((1.0)*cj1);
IkReal x1104=(cj6*sj5);
IkReal x1105=(r01*sj5*sj6);
IkReal x1106=(sj1*x1104);
IkReal x1107=(r11*sj5*sj6);
CheckValue<IkReal> x1108=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1108.valid){
continue;
}
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1103*x1104))+((cj1*x1100))+((cj1*x1107))+((r00*x1106))+(((-1.0)*x1101*x1102))+(((-1.0)*x1101*x1105)))),IkReal(((((-1.0)*x1103*x1105))+((cj1*r00*x1104))+(((-1.0)*x1100*x1101))+(((-1.0)*x1102*x1103))+((r10*x1106))+(((-1.0)*x1101*x1107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1108.value)))+(x1109.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1110=IKcos(j2);
IkReal x1111=IKsin(j2);
IkReal x1112=(cj4*sj6);
IkReal x1113=((1.0)*r00);
IkReal x1114=((0.029)*cj6);
IkReal x1115=((1.0)*cj3);
IkReal x1116=((0.0075)*sj3);
IkReal x1117=(r10*sj6);
IkReal x1118=(r11*sj6);
IkReal x1119=(cj5*sj4);
IkReal x1120=((1.0)*sj5);
IkReal x1121=((1.0)*cj5);
IkReal x1122=(cj4*cj6);
IkReal x1123=(r00*sj6);
IkReal x1124=(r01*sj6);
IkReal x1125=(cj6*r01);
IkReal x1126=((1.0)*sj3);
IkReal x1127=(cj6*sj5);
IkReal x1128=((1.0)*r10);
IkReal x1129=(cj6*r11);
IkReal x1130=(cj1*x1110);
IkReal x1131=(sj1*x1110);
IkReal x1132=(sj1*x1111);
IkReal x1133=(cj1*x1111);
evalcond[0]=(((r10*x1127))+(((-1.0)*r12*x1121))+(((-1.0)*x1126*x1131))+(((-1.0)*x1118*x1120))+((sj3*x1133)));
evalcond[1]=(((r00*x1127))+(((-1.0)*x1126*x1132))+(((-1.0)*x1126*x1130))+(((-1.0)*x1120*x1124))+(((-1.0)*r02*x1121)));
evalcond[2]=((((-1.0)*r11*x1122))+x1132+x1130+(((-1.0)*x1112*x1128))+(((-1.0)*r12*sj4*x1120))+(((-1.0)*cj6*x1119*x1128))+((x1118*x1119)));
evalcond[3]=(x1133+((x1119*x1124))+(((-1.0)*x1112*x1113))+(((-1.0)*r01*x1122))+(((-1.0)*x1131))+(((-1.0)*cj6*x1113*x1119))+(((-1.0)*r02*sj4*x1120)));
evalcond[4]=(((cj3*x1133))+((cj5*r11*x1112))+((sj4*x1129))+(((-1.0)*cj4*r12*x1120))+((sj4*x1117))+(((-1.0)*x1115*x1131))+(((-1.0)*r10*x1121*x1122)));
evalcond[5]=(((cj5*r01*x1112))+((sj4*x1123))+((sj4*x1125))+(((-1.0)*cj4*r02*x1120))+(((-1.0)*cj5*x1113*x1122))+(((-1.0)*x1115*x1130))+(((-1.0)*x1115*x1132)));
evalcond[6]=((((-0.38609)*x1131))+(((-0.3125)*sj1))+(((-0.0675)*x1130))+(((-0.0675)*x1132))+(((-0.029)*x1124))+(((0.124915)*x1123))+(((0.124915)*x1125))+((r00*x1114))+(((-1.0)*px))+((x1116*x1132))+((x1116*x1130))+(((0.38609)*x1133)));
evalcond[7]=((((0.0675)*x1133))+(((-0.0675)*x1131))+(((0.3125)*cj1))+(((0.124915)*x1117))+(((-1.0)*x1116*x1133))+(((-0.029)*x1118))+(((0.124915)*x1129))+(((-1.0)*py))+((x1116*x1131))+(((0.38609)*x1130))+(((0.38609)*x1132))+((r10*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1134=(cj5*r12);
IkReal x1135=((1.0)*sj1);
IkReal x1136=(cj5*r02);
IkReal x1137=((1.0)*cj1);
IkReal x1138=(cj6*sj5);
IkReal x1139=(r01*sj5*sj6);
IkReal x1140=(sj1*x1138);
IkReal x1141=(r11*sj5*sj6);
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1137*x1138))+((cj1*x1141))+(((-1.0)*x1135*x1136))+(((-1.0)*x1135*x1139))+((cj1*x1134))+((r00*x1140)))),IkReal(((((-1.0)*x1135*x1141))+(((-1.0)*x1134*x1135))+(((-1.0)*x1136*x1137))+(((-1.0)*x1137*x1139))+((cj1*r00*x1138))+((r10*x1140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
CheckValue<IkReal> x1143=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1143.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1142.value)+(((1.5707963267949)*(x1143.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1144=IKcos(j2);
IkReal x1145=IKsin(j2);
IkReal x1146=((0.029)*cj6);
IkReal x1147=((0.124915)*sj6);
IkReal x1148=((0.0075)*sj3);
IkReal x1149=(r11*sj6);
IkReal x1150=((1.0)*sj5);
IkReal x1151=((1.0)*sj3);
IkReal x1152=((0.124915)*cj6);
IkReal x1153=(r01*sj6);
IkReal x1154=((1.0)*cj5);
IkReal x1155=(cj6*sj5);
IkReal x1156=(cj1*x1148);
IkReal x1157=(sj1*x1144);
IkReal x1158=(cj1*x1144);
IkReal x1159=(sj1*x1145);
IkReal x1160=(cj1*x1145);
evalcond[0]=((((-1.0)*x1149*x1150))+(((-1.0)*r12*x1154))+(((-1.0)*x1151*x1157))+((r10*x1155))+((sj3*x1160)));
evalcond[1]=(((r00*x1155))+(((-1.0)*r02*x1154))+(((-1.0)*x1151*x1159))+(((-1.0)*x1151*x1158))+(((-1.0)*x1150*x1153)));
evalcond[2]=((((-0.029)*x1153))+(((-0.38609)*x1157))+(((-0.3125)*sj1))+(((0.38609)*x1160))+(((-1.0)*px))+(((-0.0675)*x1158))+(((-0.0675)*x1159))+((x1148*x1159))+((r00*x1146))+((r00*x1147))+((x1144*x1156))+((r01*x1152)));
evalcond[3]=((((0.0675)*x1160))+((r11*x1152))+(((0.3125)*cj1))+(((-1.0)*py))+(((-0.0675)*x1157))+((x1148*x1157))+(((0.38609)*x1158))+(((0.38609)*x1159))+(((-1.0)*x1145*x1156))+(((-0.029)*x1149))+((r10*x1146))+((r10*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1161=(((r01*sj5*sj6))+(((-1.0)*cj6*r00*sj5))+((cj5*r02)));
j4eval[0]=x1161;
j4eval[1]=IKsign(x1161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1162=cj6*cj6;
IkReal x1163=r20*r20;
IkReal x1164=cj5*cj5;
IkReal x1165=r21*r21;
IkReal x1166=r22*r22;
IkReal x1167=(r22*sj5);
IkReal x1168=((1.0)*sj3);
IkReal x1169=(r20*sj6);
IkReal x1170=(cj6*r21);
IkReal x1171=((2.0)*cj5);
IkReal x1172=(r21*sj6);
IkReal x1173=(cj6*r20);
IkReal x1174=((1.0)*x1164);
IkReal x1175=(x1162*x1165);
IkReal x1176=(x1162*x1163);
IkReal x1177=(((x1164*x1176))+x1166+x1163+x1175+((x1164*x1165))+((x1167*x1171*x1173))+(((2.0)*x1169*x1170))+(((-2.0)*x1164*x1169*x1170))+(((-1.0)*x1167*x1171*x1172))+(((-1.0)*x1166*x1174))+(((-1.0)*x1174*x1175))+(((-1.0)*x1176)));
j4eval[0]=x1177;
j4eval[1]=((IKabs((((cj5*sj3*x1173))+(((-1.0)*cj5*x1168*x1172))+((sj3*x1167)))))+(IKabs(((((-1.0)*x1168*x1169))+(((-1.0)*x1168*x1170))))));
j4eval[2]=IKsign(x1177);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1178=cj5*cj5;
IkReal x1179=cj6*cj6;
IkReal x1180=(cj6*r10);
IkReal x1181=((1.0)*sj6);
IkReal x1182=(cj5*sj5);
IkReal x1183=(cj6*r11);
IkReal x1184=(r12*r22);
IkReal x1185=(r21*x1178);
IkReal x1186=(r20*x1178);
IkReal x1187=(r10*x1179);
IkReal x1188=(r11*x1179);
IkReal x1189=(x1184+((x1186*x1187))+((r22*x1180*x1182))+(((-1.0)*r20*x1187))+((r20*sj6*x1183))+(((-1.0)*x1185*x1188))+((r21*sj6*x1180))+(((-1.0)*r11*r22*x1181*x1182))+(((-1.0)*x1180*x1181*x1185))+(((-1.0)*r12*r21*x1181*x1182))+((r21*x1188))+(((-1.0)*x1178*x1184))+((r11*x1185))+((r10*r20))+((cj6*r12*r20*x1182))+(((-1.0)*x1181*x1183*x1186)));
j4eval[0]=x1189;
j4eval[1]=IKsign(x1189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1190=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x1190;
j4eval[1]=IKsign(x1190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1191=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1191;
j4eval[1]=IKsign(x1191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1192=cj5*cj5;
IkReal x1193=cj6*cj6;
IkReal x1194=(r02*r22);
IkReal x1195=(cj6*r00);
IkReal x1196=(cj6*r20);
IkReal x1197=((1.0)*r21);
IkReal x1198=((1.0)*r00*r20);
IkReal x1199=(cj5*sj5*sj6);
IkReal x1200=((1.0)*cj5*sj5);
IkReal x1201=(r01*x1192);
IkReal x1202=(x1192*x1193);
IkReal x1203=(((r21*sj6*x1192*x1195))+((r01*r22*x1199))+(((-1.0)*sj6*x1195*x1197))+(((-1.0)*r02*x1196*x1200))+(((-1.0)*x1198))+(((-1.0)*r22*x1195*x1200))+((x1192*x1194))+(((-1.0)*r01*x1193*x1197))+((r00*r20*x1193))+(((-1.0)*r01*sj6*x1196))+((r02*r21*x1199))+(((-1.0)*x1197*x1201))+(((-1.0)*x1194))+((r21*x1193*x1201))+((sj6*x1196*x1201))+(((-1.0)*x1198*x1202)));
j4eval[0]=x1203;
j4eval[1]=IKsign(x1203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1204=cj5*cj5;
IkReal x1205=cj6*cj6;
IkReal x1206=(cj6*r20);
IkReal x1207=(cj2*sj1);
IkReal x1208=(cj5*r21);
IkReal x1209=(r22*sj5);
IkReal x1210=(r01*r21);
IkReal x1211=(cj6*r21);
IkReal x1212=((1.0)*sj6);
IkReal x1213=(r02*r22);
IkReal x1214=((1.0)*cj5);
IkReal x1215=((1.0)*r00*r20);
IkReal x1216=(cj5*sj5*sj6);
IkReal x1217=(cj1*sj2*sj6);
IkReal x1218=((1.0)*cj1*sj2);
IkReal x1219=(sj6*x1204);
IkReal x1220=(x1204*x1205);
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj2*x1206*x1214))+(((-1.0)*x1207*x1208*x1212))+(((-1.0)*x1209*x1218))+((cj5*x1206*x1207))+((x1208*x1217))+((x1207*x1209)))),IkReal(((((-1.0)*cj1*r20*sj2*x1212))+((x1207*x1211))+(((-1.0)*x1211*x1218))+((r20*sj6*x1207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r00*x1209*x1214))+((r00*x1211*x1219))+((r00*r20*x1205))+(((-1.0)*r01*x1206*x1212))+((x1204*x1213))+(((-1.0)*x1205*x1210))+((r01*x1206*x1219))+((cj5*r01*sj6*x1209))+(((-1.0)*r00*x1211*x1212))+(((-1.0)*x1215*x1220))+((r02*sj5*sj6*x1208))+((x1210*x1220))+(((-1.0)*x1215))+(((-1.0)*r02*sj5*x1206*x1214))+(((-1.0)*x1204*x1210))+(((-1.0)*x1213)))),-1);
if(!x1222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1221.value)+(((1.5707963267949)*(x1222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1223=IKsin(j4);
IkReal x1224=IKcos(j4);
IkReal x1225=(cj1*sj2);
IkReal x1226=((1.0)*r00);
IkReal x1227=(cj5*r01);
IkReal x1228=(sj1*sj2);
IkReal x1229=(cj5*r11);
IkReal x1230=((1.0)*cj2);
IkReal x1231=((1.0)*cj5);
IkReal x1232=(cj5*r21);
IkReal x1233=(sj1*x1230);
IkReal x1234=(cj6*x1223);
IkReal x1235=(sj6*x1224);
IkReal x1236=(sj6*x1223);
IkReal x1237=(cj6*x1224);
IkReal x1238=((1.0)*sj5*x1223);
IkReal x1239=((1.0)*sj5*x1224);
evalcond[0]=(((r20*x1236))+(((-1.0)*r20*x1231*x1237))+((x1232*x1235))+((r21*x1234))+(((-1.0)*r22*x1239)));
evalcond[1]=((((-1.0)*r20*x1231*x1234))+(((-1.0)*r20*x1235))+(((-1.0)*r21*x1237))+((x1232*x1236))+(((-1.0)*r22*x1238)));
evalcond[2]=((((-1.0)*r10*x1231*x1237))+x1225+(((-1.0)*x1233))+(((-1.0)*r12*x1239))+((r10*x1236))+((r11*x1234))+((x1229*x1235)));
evalcond[3]=((((-1.0)*r10*x1231*x1234))+x1228+(((-1.0)*r11*x1237))+(((-1.0)*r12*x1238))+((cj1*cj2))+(((-1.0)*r10*x1235))+((x1229*x1236)));
evalcond[4]=((((-1.0)*cj5*x1226*x1237))+((r00*x1236))+(((-1.0)*x1228))+((r01*x1234))+(((-1.0)*cj1*x1230))+((x1227*x1235))+(((-1.0)*r02*x1239)));
evalcond[5]=(x1225+(((-1.0)*cj5*x1226*x1234))+(((-1.0)*x1233))+(((-1.0)*r01*x1237))+(((-1.0)*x1226*x1235))+((x1227*x1236))+(((-1.0)*r02*x1238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1240=(cj2*sj1);
IkReal x1241=(r22*sj5);
IkReal x1242=((1.0)*cj5);
IkReal x1243=(cj6*r20);
IkReal x1244=(cj1*sj2);
IkReal x1245=((1.0)*sj6);
IkReal x1246=(r21*sj6);
IkReal x1247=(cj6*r21);
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x1242))+(((-1.0)*r01*sj5*x1245))+((cj6*r00*sj5)))),-1);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal((((cj5*x1240*x1243))+((x1240*x1241))+((cj5*x1244*x1246))+(((-1.0)*x1240*x1242*x1246))+(((-1.0)*x1242*x1243*x1244))+(((-1.0)*x1241*x1244)))),IkReal(((((-1.0)*r20*x1244*x1245))+((x1240*x1247))+((r20*sj6*x1240))+(((-1.0)*x1244*x1247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1248.value)))+(x1249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j4);
IkReal x1251=IKcos(j4);
IkReal x1252=(cj1*sj2);
IkReal x1253=((1.0)*r00);
IkReal x1254=(cj5*r01);
IkReal x1255=(sj1*sj2);
IkReal x1256=(cj5*r11);
IkReal x1257=((1.0)*cj2);
IkReal x1258=((1.0)*cj5);
IkReal x1259=(cj5*r21);
IkReal x1260=(sj1*x1257);
IkReal x1261=(cj6*x1250);
IkReal x1262=(sj6*x1251);
IkReal x1263=(sj6*x1250);
IkReal x1264=(cj6*x1251);
IkReal x1265=((1.0)*sj5*x1250);
IkReal x1266=((1.0)*sj5*x1251);
evalcond[0]=((((-1.0)*r20*x1258*x1264))+((r21*x1261))+(((-1.0)*r22*x1266))+((x1259*x1262))+((r20*x1263)));
evalcond[1]=((((-1.0)*r20*x1258*x1261))+(((-1.0)*r22*x1265))+(((-1.0)*r21*x1264))+((x1259*x1263))+(((-1.0)*r20*x1262)));
evalcond[2]=((((-1.0)*r12*x1266))+((r11*x1261))+x1252+((r10*x1263))+((x1256*x1262))+(((-1.0)*r10*x1258*x1264))+(((-1.0)*x1260)));
evalcond[3]=((((-1.0)*r10*x1262))+(((-1.0)*r12*x1265))+x1255+((x1256*x1263))+(((-1.0)*r10*x1258*x1261))+(((-1.0)*r11*x1264))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj5*x1253*x1264))+(((-1.0)*cj1*x1257))+((x1254*x1262))+(((-1.0)*r02*x1266))+(((-1.0)*x1255))+((r00*x1263))+((r01*x1261)));
evalcond[5]=((((-1.0)*r01*x1264))+x1252+(((-1.0)*x1253*x1262))+(((-1.0)*cj5*x1253*x1261))+((x1254*x1263))+(((-1.0)*r02*x1265))+(((-1.0)*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1267=(sj1*sj2);
IkReal x1268=(r22*sj5);
IkReal x1269=(cj1*cj2);
IkReal x1270=(r20*sj6);
IkReal x1271=(r21*x1267);
IkReal x1272=((1.0)*cj5*sj6);
IkReal x1273=(cj5*cj6*r20);
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)))),-1);
if(!x1274.valid){
continue;
}
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal((((x1269*x1273))+(((-1.0)*r21*x1269*x1272))+(((-1.0)*x1271*x1272))+((x1267*x1273))+((x1268*x1269))+((x1267*x1268)))),IkReal((((x1269*x1270))+((cj6*x1271))+((x1267*x1270))+((cj6*r21*x1269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1274.value)))+(x1275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1276=IKsin(j4);
IkReal x1277=IKcos(j4);
IkReal x1278=(cj1*sj2);
IkReal x1279=((1.0)*r00);
IkReal x1280=(cj5*r01);
IkReal x1281=(sj1*sj2);
IkReal x1282=(cj5*r11);
IkReal x1283=((1.0)*cj2);
IkReal x1284=((1.0)*cj5);
IkReal x1285=(cj5*r21);
IkReal x1286=(sj1*x1283);
IkReal x1287=(cj6*x1276);
IkReal x1288=(sj6*x1277);
IkReal x1289=(sj6*x1276);
IkReal x1290=(cj6*x1277);
IkReal x1291=((1.0)*sj5*x1276);
IkReal x1292=((1.0)*sj5*x1277);
evalcond[0]=(((x1285*x1288))+(((-1.0)*r20*x1284*x1290))+((r20*x1289))+((r21*x1287))+(((-1.0)*r22*x1292)));
evalcond[1]=(((x1285*x1289))+(((-1.0)*r20*x1288))+(((-1.0)*r21*x1290))+(((-1.0)*r20*x1284*x1287))+(((-1.0)*r22*x1291)));
evalcond[2]=(x1278+((r11*x1287))+((r10*x1289))+(((-1.0)*r12*x1292))+(((-1.0)*x1286))+((x1282*x1288))+(((-1.0)*r10*x1284*x1290)));
evalcond[3]=(x1281+(((-1.0)*r10*x1284*x1287))+(((-1.0)*r12*x1291))+((cj1*cj2))+((x1282*x1289))+(((-1.0)*r11*x1290))+(((-1.0)*r10*x1288)));
evalcond[4]=((((-1.0)*x1281))+(((-1.0)*cj5*x1279*x1290))+((r01*x1287))+(((-1.0)*cj1*x1283))+((r00*x1289))+(((-1.0)*r02*x1292))+((x1280*x1288)));
evalcond[5]=(x1278+(((-1.0)*r01*x1290))+(((-1.0)*cj5*x1279*x1287))+(((-1.0)*r02*x1291))+(((-1.0)*x1286))+((x1280*x1289))+(((-1.0)*x1279*x1288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1293=(((cj6*r00*sj5))+(((-1.0)*r01*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1293;
j4eval[1]=IKsign(x1293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1294=(((cj5*r12))+(((-1.0)*cj6*r10*sj5))+((r11*sj5*sj6)));
j4eval[0]=x1294;
j4eval[1]=IKsign(x1294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1295=cj5*cj5;
IkReal x1296=cj6*cj6;
IkReal x1297=(r00*r20);
IkReal x1298=((1.0)*r21);
IkReal x1299=(cj6*r20);
IkReal x1300=(r01*sj6);
IkReal x1301=(r02*r22);
IkReal x1302=(cj6*r00);
IkReal x1303=(r01*r21);
IkReal x1304=(cj5*r02*sj5);
IkReal x1305=((1.0)*x1295);
IkReal x1306=(cj5*r22*sj5);
IkReal x1307=(x1295*x1296);
IkReal x1308=(x1301+(((-1.0)*sj6*x1298*x1304))+((x1299*x1304))+((x1299*x1300))+(((-1.0)*r01*x1298*x1307))+x1297+((x1295*x1303))+((x1302*x1306))+(((-1.0)*x1299*x1300*x1305))+((r21*sj6*x1302))+(((-1.0)*x1300*x1306))+((x1297*x1307))+(((-1.0)*x1301*x1305))+(((-1.0)*sj6*x1295*x1298*x1302))+((x1296*x1303))+(((-1.0)*x1296*x1297)));
j4eval[0]=x1308;
j4eval[1]=IKsign(x1308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1309=cj5*cj5;
IkReal x1310=cj6*cj6;
IkReal x1311=(r00*r20);
IkReal x1312=((1.0)*r21);
IkReal x1313=(cj5*cj6);
IkReal x1314=(r22*sj5);
IkReal x1315=((1.0)*sj6);
IkReal x1316=(cj1*cj2);
IkReal x1317=(sj1*sj2);
IkReal x1318=(cj5*sj6);
IkReal x1319=(r02*sj5);
IkReal x1320=(r01*r21);
IkReal x1321=(r02*r22);
IkReal x1322=(r20*x1316);
IkReal x1323=(cj6*r01*r20);
IkReal x1324=(cj6*r00*sj6);
IkReal x1325=(x1309*x1310);
CheckValue<IkReal> x1326=IKPowWithIntegerCheck(IKsign((x1311+x1321+(((-1.0)*x1309*x1312*x1324))+((r00*x1313*x1314))+((x1309*x1320))+((r21*x1324))+(((-1.0)*x1312*x1318*x1319))+((sj6*x1323))+(((-1.0)*x1309*x1315*x1323))+(((-1.0)*x1309*x1321))+(((-1.0)*r01*x1312*x1325))+(((-1.0)*cj5*r01*x1314*x1315))+(((-1.0)*x1310*x1311))+((r20*x1313*x1319))+((x1310*x1320))+((x1311*x1325)))),-1);
if(!x1326.valid){
continue;
}
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal(((((-1.0)*x1315*x1322))+(((-1.0)*r20*x1315*x1317))+(((-1.0)*cj6*x1312*x1316))+(((-1.0)*cj6*x1312*x1317)))),IkReal((((x1313*x1322))+((x1314*x1316))+((x1314*x1317))+(((-1.0)*x1312*x1316*x1318))+(((-1.0)*x1312*x1317*x1318))+((r20*x1313*x1317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1326.value)))+(x1327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1328=IKsin(j4);
IkReal x1329=IKcos(j4);
IkReal x1330=(sj1*sj2);
IkReal x1331=(cj1*cj2);
IkReal x1332=((1.0)*r00);
IkReal x1333=(cj5*r01);
IkReal x1334=(cj5*r11);
IkReal x1335=((1.0)*cj5);
IkReal x1336=(cj1*sj2);
IkReal x1337=(cj2*sj1);
IkReal x1338=(cj5*r21);
IkReal x1339=(cj6*x1328);
IkReal x1340=(sj6*x1329);
IkReal x1341=(sj6*x1328);
IkReal x1342=(cj6*x1329);
IkReal x1343=(x1331+x1330);
IkReal x1344=((1.0)*sj5*x1328);
IkReal x1345=((1.0)*sj5*x1329);
evalcond[0]=(((r21*x1339))+((x1338*x1340))+(((-1.0)*r22*x1345))+((r20*x1341))+(((-1.0)*r20*x1335*x1342)));
evalcond[1]=((((-1.0)*r21*x1342))+(((-1.0)*r20*x1340))+((x1338*x1341))+(((-1.0)*r22*x1344))+(((-1.0)*r20*x1335*x1339)));
evalcond[2]=(x1343+(((-1.0)*r02*x1345))+((x1333*x1340))+(((-1.0)*cj5*x1332*x1342))+((r01*x1339))+((r00*x1341)));
evalcond[3]=(x1337+(((-1.0)*r10*x1335*x1342))+((r11*x1339))+(((-1.0)*x1336))+(((-1.0)*r12*x1345))+((x1334*x1340))+((r10*x1341)));
evalcond[4]=((((-1.0)*r10*x1335*x1339))+x1343+(((-1.0)*r10*x1340))+(((-1.0)*r12*x1344))+((x1334*x1341))+(((-1.0)*r11*x1342)));
evalcond[5]=(x1336+(((-1.0)*r02*x1344))+(((-1.0)*x1337))+((x1333*x1341))+(((-1.0)*cj5*x1332*x1339))+(((-1.0)*x1332*x1340))+(((-1.0)*r01*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1346=(cj5*sj6);
IkReal x1347=((1.0)*cj6);
IkReal x1348=(sj1*sj2);
IkReal x1349=(cj5*r20);
IkReal x1350=(cj1*cj2);
IkReal x1351=(r21*x1350);
IkReal x1352=((1.0)*r20*sj6);
IkReal x1353=((1.0)*r22*sj5);
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal(((((-1.0)*x1347*x1348*x1349))+((r21*x1346*x1348))+(((-1.0)*x1350*x1353))+((x1346*x1351))+(((-1.0)*x1348*x1353))+(((-1.0)*x1347*x1349*x1350)))),IkReal(((((-1.0)*x1350*x1352))+(((-1.0)*x1347*x1351))+(((-1.0)*x1348*x1352))+(((-1.0)*r21*x1347*x1348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(IKsign((((cj5*r12))+((r11*sj5*sj6))+(((-1.0)*r10*sj5*x1347)))),-1);
if(!x1355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1354.value)+(((1.5707963267949)*(x1355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1356=IKsin(j4);
IkReal x1357=IKcos(j4);
IkReal x1358=(sj1*sj2);
IkReal x1359=(cj1*cj2);
IkReal x1360=((1.0)*r00);
IkReal x1361=(cj5*r01);
IkReal x1362=(cj5*r11);
IkReal x1363=((1.0)*cj5);
IkReal x1364=(cj1*sj2);
IkReal x1365=(cj2*sj1);
IkReal x1366=(cj5*r21);
IkReal x1367=(cj6*x1356);
IkReal x1368=(sj6*x1357);
IkReal x1369=(sj6*x1356);
IkReal x1370=(cj6*x1357);
IkReal x1371=(x1359+x1358);
IkReal x1372=((1.0)*sj5*x1356);
IkReal x1373=((1.0)*sj5*x1357);
evalcond[0]=(((x1366*x1368))+(((-1.0)*r20*x1363*x1370))+(((-1.0)*r22*x1373))+((r20*x1369))+((r21*x1367)));
evalcond[1]=(((x1366*x1369))+(((-1.0)*r20*x1363*x1367))+(((-1.0)*r22*x1372))+(((-1.0)*r20*x1368))+(((-1.0)*r21*x1370)));
evalcond[2]=(x1371+((x1361*x1368))+(((-1.0)*r02*x1373))+(((-1.0)*cj5*x1360*x1370))+((r01*x1367))+((r00*x1369)));
evalcond[3]=(x1365+(((-1.0)*x1364))+((r10*x1369))+(((-1.0)*r12*x1373))+((r11*x1367))+(((-1.0)*r10*x1363*x1370))+((x1362*x1368)));
evalcond[4]=(x1371+(((-1.0)*r11*x1370))+(((-1.0)*r10*x1368))+(((-1.0)*r12*x1372))+(((-1.0)*r10*x1363*x1367))+((x1362*x1369)));
evalcond[5]=(x1364+(((-1.0)*cj5*x1360*x1367))+(((-1.0)*x1365))+((x1361*x1369))+(((-1.0)*r01*x1370))+(((-1.0)*r02*x1372))+(((-1.0)*x1360*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1374=((1.0)*sj6);
IkReal x1375=(cj1*sj2);
IkReal x1376=(r22*sj5);
IkReal x1377=(cj2*sj1);
IkReal x1378=((1.0)*cj6);
IkReal x1379=(cj5*r20);
IkReal x1380=(r21*x1375);
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign((((cj6*r00*sj5))+(((-1.0)*r01*sj5*x1374))+(((-1.0)*cj5*r02)))),-1);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382 = IKatan2WithCheck(IkReal((((cj5*r21*sj6*x1377))+(((-1.0)*cj5*x1374*x1380))+((x1375*x1376))+(((-1.0)*x1376*x1377))+((cj6*x1375*x1379))+(((-1.0)*x1377*x1378*x1379)))),IkReal(((((-1.0)*r21*x1377*x1378))+((r20*sj6*x1375))+(((-1.0)*r20*x1374*x1377))+((cj6*x1380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1381.value)))+(x1382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1383=IKsin(j4);
IkReal x1384=IKcos(j4);
IkReal x1385=(sj1*sj2);
IkReal x1386=(cj1*cj2);
IkReal x1387=((1.0)*r00);
IkReal x1388=(cj5*r01);
IkReal x1389=(cj5*r11);
IkReal x1390=((1.0)*cj5);
IkReal x1391=(cj1*sj2);
IkReal x1392=(cj2*sj1);
IkReal x1393=(cj5*r21);
IkReal x1394=(cj6*x1383);
IkReal x1395=(sj6*x1384);
IkReal x1396=(sj6*x1383);
IkReal x1397=(cj6*x1384);
IkReal x1398=(x1385+x1386);
IkReal x1399=((1.0)*sj5*x1383);
IkReal x1400=((1.0)*sj5*x1384);
evalcond[0]=(((x1393*x1395))+((r21*x1394))+(((-1.0)*r22*x1400))+((r20*x1396))+(((-1.0)*r20*x1390*x1397)));
evalcond[1]=(((x1393*x1396))+(((-1.0)*r20*x1395))+(((-1.0)*r21*x1397))+(((-1.0)*r22*x1399))+(((-1.0)*r20*x1390*x1394)));
evalcond[2]=(x1398+((x1388*x1395))+(((-1.0)*r02*x1400))+((r01*x1394))+((r00*x1396))+(((-1.0)*cj5*x1387*x1397)));
evalcond[3]=(x1392+(((-1.0)*r12*x1400))+((r10*x1396))+(((-1.0)*r10*x1390*x1397))+((x1389*x1395))+(((-1.0)*x1391))+((r11*x1394)));
evalcond[4]=(x1398+(((-1.0)*r12*x1399))+(((-1.0)*r10*x1395))+(((-1.0)*r10*x1390*x1394))+((x1389*x1396))+(((-1.0)*r11*x1397)));
evalcond[5]=((((-1.0)*r01*x1397))+x1391+((x1388*x1396))+(((-1.0)*r02*x1399))+(((-1.0)*x1392))+(((-1.0)*x1387*x1395))+(((-1.0)*cj5*x1387*x1394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1401=cj5*cj5;
IkReal x1402=cj6*cj6;
IkReal x1403=(r10*r20);
IkReal x1404=(r12*sj5);
IkReal x1405=(cj5*sj6);
IkReal x1406=(cj1*cj2);
IkReal x1407=(r22*sj5);
IkReal x1408=(sj1*sj2);
IkReal x1409=((1.0)*r21);
IkReal x1410=(r20*sj6);
IkReal x1411=(r10*sj6);
IkReal x1412=(r12*r22);
IkReal x1413=(cj6*r21);
IkReal x1414=(r11*x1401);
IkReal x1415=(cj5*cj6*r20);
IkReal x1416=((1.0)*r11*sj3);
IkReal x1417=(cj5*cj6*r10);
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal(((((-1.0)*x1405*x1408*x1409))+(((-1.0)*sj3*x1411))+(((-1.0)*cj6*x1416))+((x1406*x1415))+((x1406*x1407))+(((-1.0)*x1405*x1406*x1409))+((x1408*x1415))+((x1407*x1408)))),IkReal((((sj3*x1404))+((x1406*x1410))+((x1406*x1413))+(((-1.0)*x1405*x1416))+((x1408*x1410))+((x1408*x1413))+((sj3*x1417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign((((r11*r21*x1402))+((r21*x1414))+((cj6*r11*x1410))+((x1407*x1417))+(((-1.0)*x1404*x1405*x1409))+(((-1.0)*cj6*x1401*x1409*x1411))+(((-1.0)*x1402*x1409*x1414))+(((-1.0)*cj6*x1410*x1414))+((x1401*x1402*x1403))+(((-1.0)*x1401*x1412))+((x1411*x1413))+((x1404*x1415))+(((-1.0)*x1402*x1403))+x1412+x1403+(((-1.0)*r11*x1405*x1407)))),-1);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1418.value)+(((1.5707963267949)*(x1419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=((1.0)*r00);
IkReal x1423=(cj5*r01);
IkReal x1424=(sj1*sj2);
IkReal x1425=(cj5*r11);
IkReal x1426=((1.0)*cj5);
IkReal x1427=(cj5*r21);
IkReal x1428=(cj1*sj2);
IkReal x1429=(cj6*x1420);
IkReal x1430=(sj6*x1421);
IkReal x1431=((1.0)*cj2*cj3);
IkReal x1432=(sj6*x1420);
IkReal x1433=((1.0)*x1421);
IkReal x1434=(cj6*x1421);
IkReal x1435=((1.0)*sj5*x1420);
evalcond[0]=(((r21*x1429))+sj3+((x1427*x1430))+((r20*x1432))+(((-1.0)*r20*x1426*x1434))+(((-1.0)*r22*sj5*x1433)));
evalcond[1]=((((-1.0)*r22*x1435))+((x1427*x1432))+(((-1.0)*r20*x1430))+(((-1.0)*cj6*r21*x1433))+(((-1.0)*r20*x1426*x1429)));
evalcond[2]=((((-1.0)*r10*x1430))+(((-1.0)*r12*x1435))+((x1425*x1432))+(((-1.0)*cj6*r11*x1433))+x1424+(((-1.0)*r10*x1426*x1429))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x1422*x1430))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*x1422*x1429))+(((-1.0)*r02*x1435))+(((-1.0)*cj6*r01*x1433))+x1428+((x1423*x1432)));
evalcond[4]=(((r11*x1429))+(((-1.0)*r10*x1426*x1434))+((cj3*x1428))+((x1425*x1430))+(((-1.0)*r12*sj5*x1433))+(((-1.0)*sj1*x1431))+((r10*x1432)));
evalcond[5]=(((r01*x1429))+(((-1.0)*cj1*x1431))+((r00*x1432))+(((-1.0)*r02*sj5*x1433))+((x1423*x1430))+(((-1.0)*cj5*x1422*x1434))+(((-1.0)*cj3*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1436=cj6*cj6;
IkReal x1437=r20*r20;
IkReal x1438=cj5*cj5;
IkReal x1439=r21*r21;
IkReal x1440=r22*r22;
IkReal x1441=(r22*sj5);
IkReal x1442=((1.0)*sj3);
IkReal x1443=(r20*sj6);
IkReal x1444=(cj6*r21);
IkReal x1445=((2.0)*cj5);
IkReal x1446=(r21*sj6);
IkReal x1447=(cj6*r20);
IkReal x1448=((1.0)*x1438);
IkReal x1449=(x1436*x1439);
IkReal x1450=(x1436*x1437);
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1438*x1443*x1444))+(((2.0)*x1443*x1444))+(((-1.0)*x1450))+((x1441*x1445*x1447))+((x1438*x1439))+((x1438*x1450))+x1437+x1440+x1449+(((-1.0)*x1448*x1449))+(((-1.0)*x1440*x1448))+(((-1.0)*x1441*x1445*x1446)))),-1);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal(((((-1.0)*x1442*x1443))+(((-1.0)*x1442*x1444)))),IkReal((((cj5*sj3*x1447))+(((-1.0)*cj5*x1442*x1446))+((sj3*x1441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1451.value)))+(x1452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1453=IKsin(j4);
IkReal x1454=IKcos(j4);
IkReal x1455=((1.0)*r00);
IkReal x1456=(cj5*r01);
IkReal x1457=(sj1*sj2);
IkReal x1458=(cj5*r11);
IkReal x1459=((1.0)*cj5);
IkReal x1460=(cj5*r21);
IkReal x1461=(cj1*sj2);
IkReal x1462=(cj6*x1453);
IkReal x1463=(sj6*x1454);
IkReal x1464=((1.0)*cj2*cj3);
IkReal x1465=(sj6*x1453);
IkReal x1466=((1.0)*x1454);
IkReal x1467=(cj6*x1454);
IkReal x1468=((1.0)*sj5*x1453);
evalcond[0]=(sj3+((r20*x1465))+((x1460*x1463))+((r21*x1462))+(((-1.0)*r22*sj5*x1466))+(((-1.0)*r20*x1459*x1467)));
evalcond[1]=((((-1.0)*r22*x1468))+((x1460*x1465))+(((-1.0)*r20*x1463))+(((-1.0)*r20*x1459*x1462))+(((-1.0)*cj6*r21*x1466)));
evalcond[2]=((((-1.0)*cj6*r11*x1466))+(((-1.0)*r10*x1463))+(((-1.0)*r10*x1459*x1462))+((x1458*x1465))+x1457+((cj1*cj2))+(((-1.0)*r12*x1468)));
evalcond[3]=((((-1.0)*cj5*x1455*x1462))+(((-1.0)*r02*x1468))+(((-1.0)*cj2*sj1))+(((-1.0)*x1455*x1463))+((x1456*x1465))+x1461+(((-1.0)*cj6*r01*x1466)));
evalcond[4]=(((cj3*x1461))+(((-1.0)*r10*x1459*x1467))+((x1458*x1463))+(((-1.0)*r12*sj5*x1466))+((r11*x1462))+(((-1.0)*sj1*x1464))+((r10*x1465)));
evalcond[5]=((((-1.0)*r02*sj5*x1466))+(((-1.0)*cj5*x1455*x1467))+(((-1.0)*cj1*x1464))+((r01*x1462))+((r00*x1465))+(((-1.0)*cj3*x1457))+((x1456*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1469=(cj3*r21);
IkReal x1470=((1.0)*sj5);
IkReal x1471=(cj1*sj2);
IkReal x1472=(cj3*r22);
IkReal x1473=(cj3*r20);
IkReal x1474=(cj2*sj1);
IkReal x1475=((1.0)*cj6);
IkReal x1476=(sj3*sj6);
IkReal x1477=(sj6*x1474);
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((((sj5*x1471*x1472))+((cj5*x1469*x1477))+((cj5*cj6*x1471*x1473))+(((-1.0)*cj5*r10*sj3*x1475))+(((-1.0)*x1470*x1472*x1474))+(((-1.0)*r12*sj3*x1470))+((cj5*r11*x1476))+(((-1.0)*cj5*x1473*x1474*x1475))+(((-1.0)*cj5*sj6*x1469*x1471)))),IkReal(((((-1.0)*r11*sj3*x1475))+((cj6*x1469*x1471))+((sj6*x1471*x1473))+(((-1.0)*x1469*x1474*x1475))+(((-1.0)*r10*x1476))+(((-1.0)*x1473*x1477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign((((r01*sj5*sj6))+(((-1.0)*cj6*r00*x1470))+((cj5*r02)))),-1);
if(!x1479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1478.value)+(((1.5707963267949)*(x1479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1480=IKsin(j4);
IkReal x1481=IKcos(j4);
IkReal x1482=((1.0)*r00);
IkReal x1483=(cj5*r01);
IkReal x1484=(sj1*sj2);
IkReal x1485=(cj5*r11);
IkReal x1486=((1.0)*cj5);
IkReal x1487=(cj5*r21);
IkReal x1488=(cj1*sj2);
IkReal x1489=(cj6*x1480);
IkReal x1490=(sj6*x1481);
IkReal x1491=((1.0)*cj2*cj3);
IkReal x1492=(sj6*x1480);
IkReal x1493=((1.0)*x1481);
IkReal x1494=(cj6*x1481);
IkReal x1495=((1.0)*sj5*x1480);
evalcond[0]=(sj3+((r20*x1492))+(((-1.0)*r20*x1486*x1494))+((r21*x1489))+((x1487*x1490))+(((-1.0)*r22*sj5*x1493)));
evalcond[1]=((((-1.0)*r20*x1486*x1489))+((x1487*x1492))+(((-1.0)*r20*x1490))+(((-1.0)*r22*x1495))+(((-1.0)*cj6*r21*x1493)));
evalcond[2]=((((-1.0)*cj6*r11*x1493))+(((-1.0)*r12*x1495))+(((-1.0)*r10*x1490))+((x1485*x1492))+x1484+((cj1*cj2))+(((-1.0)*r10*x1486*x1489)));
evalcond[3]=((((-1.0)*x1482*x1490))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x1495))+((x1483*x1492))+x1488+(((-1.0)*cj6*r01*x1493))+(((-1.0)*cj5*x1482*x1489)));
evalcond[4]=(((cj3*x1488))+((r10*x1492))+((r11*x1489))+((x1485*x1490))+(((-1.0)*r12*sj5*x1493))+(((-1.0)*sj1*x1491))+(((-1.0)*r10*x1486*x1494)));
evalcond[5]=(((r00*x1492))+((r01*x1489))+(((-1.0)*cj3*x1484))+(((-1.0)*r02*sj5*x1493))+(((-1.0)*cj1*x1491))+((x1483*x1490))+(((-1.0)*cj5*x1482*x1494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "0e297a1152efd137cd47db69db73edfd"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
